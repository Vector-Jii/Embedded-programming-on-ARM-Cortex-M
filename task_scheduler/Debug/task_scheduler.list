
task_scheduler.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000158c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000012c  0800173c  0800173c  0001173c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001868  08001868  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08001868  08001868  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001868  08001868  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001868  08001868  00011868  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800186c  0800186c  0001186c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08001870  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000004c  20000074  080018e4  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000c0  080018e4  000200c0  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   000025c2  00000000  00000000  0002009e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000006e1  00000000  00000000  00022660  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000198  00000000  00000000  00022d48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000160  00000000  00000000  00022ee0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00001d68  00000000  00000000  00023040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000156c  00000000  00000000  00024da8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00009a18  00000000  00000000  00026314  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0002fd2c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000d50  00000000  00000000  0002fd80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000074 	.word	0x20000074
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08001724 	.word	0x08001724

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000078 	.word	0x20000078
 80001ec:	08001724 	.word	0x08001724

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <main>:
uint32_t task_handlers [MAX_TASK];   //Stores address of each task function

uint8_t current_task = 0;

int main(void)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	af00      	add	r7, sp, #0
	enable_proessor_fault();
 8000294:	f000 f8ca 	bl	800042c <enable_proessor_fault>
	init_scheduler_stack(SCHEDULER_STACK_START);
 8000298:	480c      	ldr	r0, [pc, #48]	; (80002cc <main+0x3c>)
 800029a:	f000 f843 	bl	8000324 <init_scheduler_stack>

	task_handlers[0] = (uint32_t)task1_handler;  //capture the address of the task handlers
 800029e:	4a0c      	ldr	r2, [pc, #48]	; (80002d0 <main+0x40>)
 80002a0:	4b0c      	ldr	r3, [pc, #48]	; (80002d4 <main+0x44>)
 80002a2:	601a      	str	r2, [r3, #0]
	task_handlers[1] = (uint32_t)task2_handler;  // Store task address
 80002a4:	4a0c      	ldr	r2, [pc, #48]	; (80002d8 <main+0x48>)
 80002a6:	4b0b      	ldr	r3, [pc, #44]	; (80002d4 <main+0x44>)
 80002a8:	605a      	str	r2, [r3, #4]
	task_handlers[2] = (uint32_t)task3_handler;
 80002aa:	4a0c      	ldr	r2, [pc, #48]	; (80002dc <main+0x4c>)
 80002ac:	4b09      	ldr	r3, [pc, #36]	; (80002d4 <main+0x44>)
 80002ae:	609a      	str	r2, [r3, #8]
	task_handlers[3] = (uint32_t)task4_handler;
 80002b0:	4a0b      	ldr	r2, [pc, #44]	; (80002e0 <main+0x50>)
 80002b2:	4b08      	ldr	r3, [pc, #32]	; (80002d4 <main+0x44>)
 80002b4:	60da      	str	r2, [r3, #12]


	init_task_stack();
 80002b6:	f000 f873 	bl	80003a0 <init_task_stack>

	init_systick_timer(TICK_HZ);
 80002ba:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80002be:	f000 f837 	bl	8000330 <init_systick_timer>

	switch_sp_to_psp();
 80002c2:	f000 f8d1 	bl	8000468 <switch_sp_to_psp>

	task1_handler();
 80002c6:	f000 f80d 	bl	80002e4 <task1_handler>



    /* Loop forever */
	for(;;);
 80002ca:	e7fe      	b.n	80002ca <main+0x3a>
 80002cc:	2001f000 	.word	0x2001f000
 80002d0:	080002e5 	.word	0x080002e5
 80002d4:	200000a0 	.word	0x200000a0
 80002d8:	080002f5 	.word	0x080002f5
 80002dc:	08000305 	.word	0x08000305
 80002e0:	08000315 	.word	0x08000315

080002e4 <task1_handler>:
}

void task1_handler(void)
{
 80002e4:	b580      	push	{r7, lr}
 80002e6:	af00      	add	r7, sp, #0
	while(1)
	{
		printf("Inside task 1 \n");
 80002e8:	4801      	ldr	r0, [pc, #4]	; (80002f0 <task1_handler+0xc>)
 80002ea:	f000 fad9 	bl	80008a0 <puts>
 80002ee:	e7fb      	b.n	80002e8 <task1_handler+0x4>
 80002f0:	0800173c 	.word	0x0800173c

080002f4 <task2_handler>:
	}
}

void task2_handler(void)
{
 80002f4:	b580      	push	{r7, lr}
 80002f6:	af00      	add	r7, sp, #0
	while(1)
	{
		printf("Inside task 2 \n");
 80002f8:	4801      	ldr	r0, [pc, #4]	; (8000300 <task2_handler+0xc>)
 80002fa:	f000 fad1 	bl	80008a0 <puts>
 80002fe:	e7fb      	b.n	80002f8 <task2_handler+0x4>
 8000300:	0800174c 	.word	0x0800174c

08000304 <task3_handler>:
	}
}

void task3_handler(void)
{
 8000304:	b580      	push	{r7, lr}
 8000306:	af00      	add	r7, sp, #0
	while(1)
	{
		printf("Inside task 3 \n");
 8000308:	4801      	ldr	r0, [pc, #4]	; (8000310 <task3_handler+0xc>)
 800030a:	f000 fac9 	bl	80008a0 <puts>
 800030e:	e7fb      	b.n	8000308 <task3_handler+0x4>
 8000310:	0800175c 	.word	0x0800175c

08000314 <task4_handler>:
	}
}

void task4_handler(void)
{
 8000314:	b580      	push	{r7, lr}
 8000316:	af00      	add	r7, sp, #0
	while(1)
	{

		printf("Inside task 4 \n");
 8000318:	4801      	ldr	r0, [pc, #4]	; (8000320 <task4_handler+0xc>)
 800031a:	f000 fac1 	bl	80008a0 <puts>
 800031e:	e7fb      	b.n	8000318 <task4_handler+0x4>
 8000320:	0800176c 	.word	0x0800176c

08000324 <init_scheduler_stack>:
	}
}

__attribute__((naked))void init_scheduler_stack(uint32_t sched_top_stack)
{
 8000324:	4603      	mov	r3, r0
	__asm volatile("MSR MSP,%0": :"r"(sched_top_stack) : );
 8000326:	f383 8808 	msr	MSP, r3
	__asm volatile("BX LR ");
 800032a:	4770      	bx	lr
}
 800032c:	bf00      	nop
	...

08000330 <init_systick_timer>:

void init_systick_timer(uint32_t tick_hz)
{
 8000330:	b480      	push	{r7}
 8000332:	b087      	sub	sp, #28
 8000334:	af00      	add	r7, sp, #0
 8000336:	6078      	str	r0, [r7, #4]
	uint32_t *pSYST_RVR = (uint32_t*)0xE000E014;
 8000338:	4b16      	ldr	r3, [pc, #88]	; (8000394 <init_systick_timer+0x64>)
 800033a:	617b      	str	r3, [r7, #20]
	//calculate count value []
	uint32_t count_value = (SYSTICK_TIMER_CLK/tick_hz)-1;
 800033c:	4a16      	ldr	r2, [pc, #88]	; (8000398 <init_systick_timer+0x68>)
 800033e:	687b      	ldr	r3, [r7, #4]
 8000340:	fbb2 f3f3 	udiv	r3, r2, r3
 8000344:	3b01      	subs	r3, #1
 8000346:	613b      	str	r3, [r7, #16]

	//Clear the value of SVR
	*pSYST_RVR &= ~(0x00FFFFFF);
 8000348:	697b      	ldr	r3, [r7, #20]
 800034a:	681b      	ldr	r3, [r3, #0]
 800034c:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
 8000350:	697b      	ldr	r3, [r7, #20]
 8000352:	601a      	str	r2, [r3, #0]

	//load the value in SVR
	*pSYST_RVR |= count_value;
 8000354:	697b      	ldr	r3, [r7, #20]
 8000356:	681a      	ldr	r2, [r3, #0]
 8000358:	693b      	ldr	r3, [r7, #16]
 800035a:	431a      	orrs	r2, r3
 800035c:	697b      	ldr	r3, [r7, #20]
 800035e:	601a      	str	r2, [r3, #0]

	// do some settings
	uint32_t *pSYST_CSR = (uint32_t*) 0xE000E010;
 8000360:	4b0e      	ldr	r3, [pc, #56]	; (800039c <init_systick_timer+0x6c>)
 8000362:	60fb      	str	r3, [r7, #12]

	//processor clock src
	*pSYST_CSR |= (1 << 1);
 8000364:	68fb      	ldr	r3, [r7, #12]
 8000366:	681b      	ldr	r3, [r3, #0]
 8000368:	f043 0202 	orr.w	r2, r3, #2
 800036c:	68fb      	ldr	r3, [r7, #12]
 800036e:	601a      	str	r2, [r3, #0]

	//Enable sys_tick exception request
	*pSYST_CSR |= (1 << 2);
 8000370:	68fb      	ldr	r3, [r7, #12]
 8000372:	681b      	ldr	r3, [r3, #0]
 8000374:	f043 0204 	orr.w	r2, r3, #4
 8000378:	68fb      	ldr	r3, [r7, #12]
 800037a:	601a      	str	r2, [r3, #0]

	//Enable sys tick
	*pSYST_CSR |= (1 << 0);
 800037c:	68fb      	ldr	r3, [r7, #12]
 800037e:	681b      	ldr	r3, [r3, #0]
 8000380:	f043 0201 	orr.w	r2, r3, #1
 8000384:	68fb      	ldr	r3, [r7, #12]
 8000386:	601a      	str	r2, [r3, #0]


}
 8000388:	bf00      	nop
 800038a:	371c      	adds	r7, #28
 800038c:	46bd      	mov	sp, r7
 800038e:	bc80      	pop	{r7}
 8000390:	4770      	bx	lr
 8000392:	bf00      	nop
 8000394:	e000e014 	.word	0xe000e014
 8000398:	00f42400 	.word	0x00f42400
 800039c:	e000e010 	.word	0xe000e010

080003a0 <init_task_stack>:

void init_task_stack(void)
{
 80003a0:	b480      	push	{r7}
 80003a2:	b085      	sub	sp, #20
 80003a4:	af00      	add	r7, sp, #0
	uint32_t *pPSP;

	for(int j=0;j<MAX_TASK;j++)
 80003a6:	2300      	movs	r3, #0
 80003a8:	60bb      	str	r3, [r7, #8]
 80003aa:	e032      	b.n	8000412 <init_task_stack+0x72>
	{
		pPSP = (uint32_t*)psp_of_tasks[j];
 80003ac:	4a1d      	ldr	r2, [pc, #116]	; (8000424 <init_task_stack+0x84>)
 80003ae:	68bb      	ldr	r3, [r7, #8]
 80003b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80003b4:	60fb      	str	r3, [r7, #12]

		pPSP--;
 80003b6:	68fb      	ldr	r3, [r7, #12]
 80003b8:	3b04      	subs	r3, #4
 80003ba:	60fb      	str	r3, [r7, #12]
		*pPSP = DUMMY_XPSR; // 0x01000000
 80003bc:	68fb      	ldr	r3, [r7, #12]
 80003be:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80003c2:	601a      	str	r2, [r3, #0]

		pPSP--;//PC
 80003c4:	68fb      	ldr	r3, [r7, #12]
 80003c6:	3b04      	subs	r3, #4
 80003c8:	60fb      	str	r3, [r7, #12]
		*pPSP = task_handlers[j];
 80003ca:	4a17      	ldr	r2, [pc, #92]	; (8000428 <init_task_stack+0x88>)
 80003cc:	68bb      	ldr	r3, [r7, #8]
 80003ce:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80003d2:	68fb      	ldr	r3, [r7, #12]
 80003d4:	601a      	str	r2, [r3, #0]

		pPSP--;//LR
 80003d6:	68fb      	ldr	r3, [r7, #12]
 80003d8:	3b04      	subs	r3, #4
 80003da:	60fb      	str	r3, [r7, #12]
		*pPSP = 0xFFFFFFFD;
 80003dc:	68fb      	ldr	r3, [r7, #12]
 80003de:	f06f 0202 	mvn.w	r2, #2
 80003e2:	601a      	str	r2, [r3, #0]

		for(int k = 0;k<13;k++)
 80003e4:	2300      	movs	r3, #0
 80003e6:	607b      	str	r3, [r7, #4]
 80003e8:	e008      	b.n	80003fc <init_task_stack+0x5c>
		{
			pPSP--;
 80003ea:	68fb      	ldr	r3, [r7, #12]
 80003ec:	3b04      	subs	r3, #4
 80003ee:	60fb      	str	r3, [r7, #12]
			*pPSP = 0;
 80003f0:	68fb      	ldr	r3, [r7, #12]
 80003f2:	2200      	movs	r2, #0
 80003f4:	601a      	str	r2, [r3, #0]
		for(int k = 0;k<13;k++)
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	3301      	adds	r3, #1
 80003fa:	607b      	str	r3, [r7, #4]
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	2b0c      	cmp	r3, #12
 8000400:	ddf3      	ble.n	80003ea <init_task_stack+0x4a>
		}

		psp_of_tasks[j] = (uint32_t)pPSP;
 8000402:	68fa      	ldr	r2, [r7, #12]
 8000404:	4907      	ldr	r1, [pc, #28]	; (8000424 <init_task_stack+0x84>)
 8000406:	68bb      	ldr	r3, [r7, #8]
 8000408:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int j=0;j<MAX_TASK;j++)
 800040c:	68bb      	ldr	r3, [r7, #8]
 800040e:	3301      	adds	r3, #1
 8000410:	60bb      	str	r3, [r7, #8]
 8000412:	68bb      	ldr	r3, [r7, #8]
 8000414:	2b03      	cmp	r3, #3
 8000416:	ddc9      	ble.n	80003ac <init_task_stack+0xc>
	}
}
 8000418:	bf00      	nop
 800041a:	bf00      	nop
 800041c:	3714      	adds	r7, #20
 800041e:	46bd      	mov	sp, r7
 8000420:	bc80      	pop	{r7}
 8000422:	4770      	bx	lr
 8000424:	20000000 	.word	0x20000000
 8000428:	200000a0 	.word	0x200000a0

0800042c <enable_proessor_fault>:

void enable_proessor_fault(void)
{
 800042c:	b480      	push	{r7}
 800042e:	b083      	sub	sp, #12
 8000430:	af00      	add	r7, sp, #0
	//1. Enable all the configurable exception like usage,bus and mem manage fault

		uint32_t *pSHCSR = (uint32_t*)0xE000ED24;    // pointer to the SHCSR
 8000432:	4b0c      	ldr	r3, [pc, #48]	; (8000464 <enable_proessor_fault+0x38>)
 8000434:	607b      	str	r3, [r7, #4]
		*pSHCSR |= (1<< 16); // memory manage
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	681b      	ldr	r3, [r3, #0]
 800043a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	601a      	str	r2, [r3, #0]
		*pSHCSR |= (1<< 17); // bus
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	681b      	ldr	r3, [r3, #0]
 8000446:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	601a      	str	r2, [r3, #0]
		*pSHCSR |= (1<< 18); // usage
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	681b      	ldr	r3, [r3, #0]
 8000452:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	601a      	str	r2, [r3, #0]
}
 800045a:	bf00      	nop
 800045c:	370c      	adds	r7, #12
 800045e:	46bd      	mov	sp, r7
 8000460:	bc80      	pop	{r7}
 8000462:	4770      	bx	lr
 8000464:	e000ed24 	.word	0xe000ed24

08000468 <switch_sp_to_psp>:
__attribute__((naked))void switch_sp_to_psp(void)
{
	//1. Initialize the PSP to the TASK1  stack start

	//get value of psp of current task
	__asm volatile ("PUSH {LR}");  //preserve LR that connects back to main
 8000468:	b500      	push	{lr}
	__asm volatile ("BL get_psp_value");
 800046a:	f000 f80b 	bl	8000484 <get_psp_value>
	__asm volatile ("MSR PSP,R0"); //Initialize PSP
 800046e:	f380 8809 	msr	PSP, r0
	__asm volatile ("POP {LR}");//POPS back LR value
 8000472:	f85d eb04 	ldr.w	lr, [sp], #4

	//2. Change sp to PSP using the CONTROL register

	__asm volatile ("MOV R0,0x02");
 8000476:	f04f 0002 	mov.w	r0, #2
	__asm volatile ("MSR CONTROL,R0");
 800047a:	f380 8814 	msr	CONTROL, r0
	__asm volatile ("BX LR");
 800047e:	4770      	bx	lr

}
 8000480:	bf00      	nop
	...

08000484 <get_psp_value>:

uint32_t get_psp_value(void)
{
 8000484:	b480      	push	{r7}
 8000486:	af00      	add	r7, sp, #0
	return psp_of_tasks[current_task];
 8000488:	4b04      	ldr	r3, [pc, #16]	; (800049c <get_psp_value+0x18>)
 800048a:	781b      	ldrb	r3, [r3, #0]
 800048c:	461a      	mov	r2, r3
 800048e:	4b04      	ldr	r3, [pc, #16]	; (80004a0 <get_psp_value+0x1c>)
 8000490:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
}
 8000494:	4618      	mov	r0, r3
 8000496:	46bd      	mov	sp, r7
 8000498:	bc80      	pop	{r7}
 800049a:	4770      	bx	lr
 800049c:	20000090 	.word	0x20000090
 80004a0:	20000000 	.word	0x20000000

080004a4 <save_psp_value>:

void save_psp_value(uint32_t current_psp_value)
{
 80004a4:	b480      	push	{r7}
 80004a6:	b083      	sub	sp, #12
 80004a8:	af00      	add	r7, sp, #0
 80004aa:	6078      	str	r0, [r7, #4]
	psp_of_tasks[current_task] = current_psp_value;
 80004ac:	4b05      	ldr	r3, [pc, #20]	; (80004c4 <save_psp_value+0x20>)
 80004ae:	781b      	ldrb	r3, [r3, #0]
 80004b0:	4619      	mov	r1, r3
 80004b2:	4a05      	ldr	r2, [pc, #20]	; (80004c8 <save_psp_value+0x24>)
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
 80004ba:	bf00      	nop
 80004bc:	370c      	adds	r7, #12
 80004be:	46bd      	mov	sp, r7
 80004c0:	bc80      	pop	{r7}
 80004c2:	4770      	bx	lr
 80004c4:	20000090 	.word	0x20000090
 80004c8:	20000000 	.word	0x20000000

080004cc <update_next_task>:

void update_next_task()
{
 80004cc:	b480      	push	{r7}
 80004ce:	af00      	add	r7, sp, #0
	current_task++;
 80004d0:	4b08      	ldr	r3, [pc, #32]	; (80004f4 <update_next_task+0x28>)
 80004d2:	781b      	ldrb	r3, [r3, #0]
 80004d4:	3301      	adds	r3, #1
 80004d6:	b2da      	uxtb	r2, r3
 80004d8:	4b06      	ldr	r3, [pc, #24]	; (80004f4 <update_next_task+0x28>)
 80004da:	701a      	strb	r2, [r3, #0]
	current_task = current_task % MAX_TASK;
 80004dc:	4b05      	ldr	r3, [pc, #20]	; (80004f4 <update_next_task+0x28>)
 80004de:	781b      	ldrb	r3, [r3, #0]
 80004e0:	f003 0303 	and.w	r3, r3, #3
 80004e4:	b2da      	uxtb	r2, r3
 80004e6:	4b03      	ldr	r3, [pc, #12]	; (80004f4 <update_next_task+0x28>)
 80004e8:	701a      	strb	r2, [r3, #0]
}
 80004ea:	bf00      	nop
 80004ec:	46bd      	mov	sp, r7
 80004ee:	bc80      	pop	{r7}
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop
 80004f4:	20000090 	.word	0x20000090

080004f8 <SysTick_Handler>:
__attribute__((naked))void SysTick_Handler(void)
{
	//Save the context of the current task

		//1. Get the current running task's PSP value
		__asm volatile("MRS R0,PSP");
 80004f8:	f3ef 8009 	mrs	r0, PSP

		//2. Using that PSP value store SP2 (R4- R11)
		__asm volatile("STmDB R0!,{R4-R11}");
 80004fc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}

		__asm volatile("PUSH {LR}");
 8000500:	b500      	push	{lr}

		//3. save the current value of PSP
		__asm volatile("BL save_psp_value");
 8000502:	f7ff ffcf 	bl	80004a4 <save_psp_value>

	// Retrive the context of next task

		//1. Decide next task to run
		__asm volatile("BL update_next_task");
 8000506:	f7ff ffe1 	bl	80004cc <update_next_task>

		//2. get its past PSP value
		__asm volatile ("BL get_psp_value");
 800050a:	f7ff ffbb 	bl	8000484 <get_psp_value>

		//3. Using that PSP value retrive SP2(R4 TO R11)
		__asm volatile ("LDMIA R0!, {R4-R11}");
 800050e:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}

		//4. update and exit
		__asm volatile ("MSR PSP,R0");
 8000512:	f380 8809 	msr	PSP, r0

		__asm volatile("POP {LR}");
 8000516:	f85d eb04 	ldr.w	lr, [sp], #4

		__asm volatile("BX LR");
 800051a:	4770      	bx	lr


}
 800051c:	bf00      	nop
	...

08000520 <HardFault_Handler>:

//2. Implement the fault handlers

void HardFault_Handler(void)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	af00      	add	r7, sp, #0
	printf("Inside hard fault handler ");
 8000524:	4801      	ldr	r0, [pc, #4]	; (800052c <HardFault_Handler+0xc>)
 8000526:	f000 f935 	bl	8000794 <iprintf>
	while(1);
 800052a:	e7fe      	b.n	800052a <HardFault_Handler+0xa>
 800052c:	0800177c 	.word	0x0800177c

08000530 <MemManage_Handler>:
}

void MemManage_Handler(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	af00      	add	r7, sp, #0
	printf("memory manage fault handler");
 8000534:	4801      	ldr	r0, [pc, #4]	; (800053c <MemManage_Handler+0xc>)
 8000536:	f000 f92d 	bl	8000794 <iprintf>
	while(1);
 800053a:	e7fe      	b.n	800053a <MemManage_Handler+0xa>
 800053c:	08001798 	.word	0x08001798

08000540 <BusFault_Handler>:
}

void BusFault_Handler(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	af00      	add	r7, sp, #0
	printf("Inside bus fault handler");
 8000544:	4801      	ldr	r0, [pc, #4]	; (800054c <BusFault_Handler+0xc>)
 8000546:	f000 f925 	bl	8000794 <iprintf>
	while(1);
 800054a:	e7fe      	b.n	800054a <BusFault_Handler+0xa>
 800054c:	080017b4 	.word	0x080017b4

08000550 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8000550:	b480      	push	{r7}
 8000552:	b083      	sub	sp, #12
 8000554:	af00      	add	r7, sp, #0
 8000556:	4603      	mov	r3, r0
 8000558:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 800055a:	4b0e      	ldr	r3, [pc, #56]	; (8000594 <ITM_SendChar+0x44>)
 800055c:	681b      	ldr	r3, [r3, #0]
 800055e:	4a0d      	ldr	r2, [pc, #52]	; (8000594 <ITM_SendChar+0x44>)
 8000560:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000564:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8000566:	4b0c      	ldr	r3, [pc, #48]	; (8000598 <ITM_SendChar+0x48>)
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	4a0b      	ldr	r2, [pc, #44]	; (8000598 <ITM_SendChar+0x48>)
 800056c:	f043 0301 	orr.w	r3, r3, #1
 8000570:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8000572:	bf00      	nop
 8000574:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	f003 0301 	and.w	r3, r3, #1
 800057e:	2b00      	cmp	r3, #0
 8000580:	d0f8      	beq.n	8000574 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8000582:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8000586:	79fb      	ldrb	r3, [r7, #7]
 8000588:	6013      	str	r3, [r2, #0]
}
 800058a:	bf00      	nop
 800058c:	370c      	adds	r7, #12
 800058e:	46bd      	mov	sp, r7
 8000590:	bc80      	pop	{r7}
 8000592:	4770      	bx	lr
 8000594:	e000edfc 	.word	0xe000edfc
 8000598:	e0000e00 	.word	0xe0000e00

0800059c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b086      	sub	sp, #24
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	60f8      	str	r0, [r7, #12]
 80005a4:	60b9      	str	r1, [r7, #8]
 80005a6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005a8:	2300      	movs	r3, #0
 80005aa:	617b      	str	r3, [r7, #20]
 80005ac:	e00a      	b.n	80005c4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80005ae:	f3af 8000 	nop.w
 80005b2:	4601      	mov	r1, r0
 80005b4:	68bb      	ldr	r3, [r7, #8]
 80005b6:	1c5a      	adds	r2, r3, #1
 80005b8:	60ba      	str	r2, [r7, #8]
 80005ba:	b2ca      	uxtb	r2, r1
 80005bc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005be:	697b      	ldr	r3, [r7, #20]
 80005c0:	3301      	adds	r3, #1
 80005c2:	617b      	str	r3, [r7, #20]
 80005c4:	697a      	ldr	r2, [r7, #20]
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	429a      	cmp	r2, r3
 80005ca:	dbf0      	blt.n	80005ae <_read+0x12>
	}

return len;
 80005cc:	687b      	ldr	r3, [r7, #4]
}
 80005ce:	4618      	mov	r0, r3
 80005d0:	3718      	adds	r7, #24
 80005d2:	46bd      	mov	sp, r7
 80005d4:	bd80      	pop	{r7, pc}

080005d6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80005d6:	b580      	push	{r7, lr}
 80005d8:	b086      	sub	sp, #24
 80005da:	af00      	add	r7, sp, #0
 80005dc:	60f8      	str	r0, [r7, #12]
 80005de:	60b9      	str	r1, [r7, #8]
 80005e0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005e2:	2300      	movs	r3, #0
 80005e4:	617b      	str	r3, [r7, #20]
 80005e6:	e009      	b.n	80005fc <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 80005e8:	68bb      	ldr	r3, [r7, #8]
 80005ea:	1c5a      	adds	r2, r3, #1
 80005ec:	60ba      	str	r2, [r7, #8]
 80005ee:	781b      	ldrb	r3, [r3, #0]
 80005f0:	4618      	mov	r0, r3
 80005f2:	f7ff ffad 	bl	8000550 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005f6:	697b      	ldr	r3, [r7, #20]
 80005f8:	3301      	adds	r3, #1
 80005fa:	617b      	str	r3, [r7, #20]
 80005fc:	697a      	ldr	r2, [r7, #20]
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	429a      	cmp	r2, r3
 8000602:	dbf1      	blt.n	80005e8 <_write+0x12>
	}
	return len;
 8000604:	687b      	ldr	r3, [r7, #4]
}
 8000606:	4618      	mov	r0, r3
 8000608:	3718      	adds	r7, #24
 800060a:	46bd      	mov	sp, r7
 800060c:	bd80      	pop	{r7, pc}

0800060e <_close>:

int _close(int file)
{
 800060e:	b480      	push	{r7}
 8000610:	b083      	sub	sp, #12
 8000612:	af00      	add	r7, sp, #0
 8000614:	6078      	str	r0, [r7, #4]
	return -1;
 8000616:	f04f 33ff 	mov.w	r3, #4294967295
}
 800061a:	4618      	mov	r0, r3
 800061c:	370c      	adds	r7, #12
 800061e:	46bd      	mov	sp, r7
 8000620:	bc80      	pop	{r7}
 8000622:	4770      	bx	lr

08000624 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000624:	b480      	push	{r7}
 8000626:	b083      	sub	sp, #12
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
 800062c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800062e:	683b      	ldr	r3, [r7, #0]
 8000630:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000634:	605a      	str	r2, [r3, #4]
	return 0;
 8000636:	2300      	movs	r3, #0
}
 8000638:	4618      	mov	r0, r3
 800063a:	370c      	adds	r7, #12
 800063c:	46bd      	mov	sp, r7
 800063e:	bc80      	pop	{r7}
 8000640:	4770      	bx	lr

08000642 <_isatty>:

int _isatty(int file)
{
 8000642:	b480      	push	{r7}
 8000644:	b083      	sub	sp, #12
 8000646:	af00      	add	r7, sp, #0
 8000648:	6078      	str	r0, [r7, #4]
	return 1;
 800064a:	2301      	movs	r3, #1
}
 800064c:	4618      	mov	r0, r3
 800064e:	370c      	adds	r7, #12
 8000650:	46bd      	mov	sp, r7
 8000652:	bc80      	pop	{r7}
 8000654:	4770      	bx	lr

08000656 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000656:	b480      	push	{r7}
 8000658:	b085      	sub	sp, #20
 800065a:	af00      	add	r7, sp, #0
 800065c:	60f8      	str	r0, [r7, #12]
 800065e:	60b9      	str	r1, [r7, #8]
 8000660:	607a      	str	r2, [r7, #4]
	return 0;
 8000662:	2300      	movs	r3, #0
}
 8000664:	4618      	mov	r0, r3
 8000666:	3714      	adds	r7, #20
 8000668:	46bd      	mov	sp, r7
 800066a:	bc80      	pop	{r7}
 800066c:	4770      	bx	lr
	...

08000670 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b086      	sub	sp, #24
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000678:	4a14      	ldr	r2, [pc, #80]	; (80006cc <_sbrk+0x5c>)
 800067a:	4b15      	ldr	r3, [pc, #84]	; (80006d0 <_sbrk+0x60>)
 800067c:	1ad3      	subs	r3, r2, r3
 800067e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000680:	697b      	ldr	r3, [r7, #20]
 8000682:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000684:	4b13      	ldr	r3, [pc, #76]	; (80006d4 <_sbrk+0x64>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	2b00      	cmp	r3, #0
 800068a:	d102      	bne.n	8000692 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800068c:	4b11      	ldr	r3, [pc, #68]	; (80006d4 <_sbrk+0x64>)
 800068e:	4a12      	ldr	r2, [pc, #72]	; (80006d8 <_sbrk+0x68>)
 8000690:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000692:	4b10      	ldr	r3, [pc, #64]	; (80006d4 <_sbrk+0x64>)
 8000694:	681a      	ldr	r2, [r3, #0]
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	4413      	add	r3, r2
 800069a:	693a      	ldr	r2, [r7, #16]
 800069c:	429a      	cmp	r2, r3
 800069e:	d207      	bcs.n	80006b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80006a0:	f000 f846 	bl	8000730 <__errno>
 80006a4:	4603      	mov	r3, r0
 80006a6:	220c      	movs	r2, #12
 80006a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80006aa:	f04f 33ff 	mov.w	r3, #4294967295
 80006ae:	e009      	b.n	80006c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80006b0:	4b08      	ldr	r3, [pc, #32]	; (80006d4 <_sbrk+0x64>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80006b6:	4b07      	ldr	r3, [pc, #28]	; (80006d4 <_sbrk+0x64>)
 80006b8:	681a      	ldr	r2, [r3, #0]
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	4413      	add	r3, r2
 80006be:	4a05      	ldr	r2, [pc, #20]	; (80006d4 <_sbrk+0x64>)
 80006c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80006c2:	68fb      	ldr	r3, [r7, #12]
}
 80006c4:	4618      	mov	r0, r3
 80006c6:	3718      	adds	r7, #24
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bd80      	pop	{r7, pc}
 80006cc:	20020000 	.word	0x20020000
 80006d0:	00000400 	.word	0x00000400
 80006d4:	20000094 	.word	0x20000094
 80006d8:	200000c0 	.word	0x200000c0

080006dc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80006dc:	480d      	ldr	r0, [pc, #52]	; (8000714 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80006de:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80006e0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006e4:	480c      	ldr	r0, [pc, #48]	; (8000718 <LoopForever+0x6>)
  ldr r1, =_edata
 80006e6:	490d      	ldr	r1, [pc, #52]	; (800071c <LoopForever+0xa>)
  ldr r2, =_sidata
 80006e8:	4a0d      	ldr	r2, [pc, #52]	; (8000720 <LoopForever+0xe>)
  movs r3, #0
 80006ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006ec:	e002      	b.n	80006f4 <LoopCopyDataInit>

080006ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006f2:	3304      	adds	r3, #4

080006f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006f8:	d3f9      	bcc.n	80006ee <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006fa:	4a0a      	ldr	r2, [pc, #40]	; (8000724 <LoopForever+0x12>)
  ldr r4, =_ebss
 80006fc:	4c0a      	ldr	r4, [pc, #40]	; (8000728 <LoopForever+0x16>)
  movs r3, #0
 80006fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000700:	e001      	b.n	8000706 <LoopFillZerobss>

08000702 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000702:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000704:	3204      	adds	r2, #4

08000706 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000706:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000708:	d3fb      	bcc.n	8000702 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800070a:	f000 f817 	bl	800073c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800070e:	f7ff fdbf 	bl	8000290 <main>

08000712 <LoopForever>:

LoopForever:
    b LoopForever
 8000712:	e7fe      	b.n	8000712 <LoopForever>
  ldr   r0, =_estack
 8000714:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000718:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800071c:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000720:	08001870 	.word	0x08001870
  ldr r2, =_sbss
 8000724:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000728:	200000c0 	.word	0x200000c0

0800072c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800072c:	e7fe      	b.n	800072c <ADC_IRQHandler>
	...

08000730 <__errno>:
 8000730:	4b01      	ldr	r3, [pc, #4]	; (8000738 <__errno+0x8>)
 8000732:	6818      	ldr	r0, [r3, #0]
 8000734:	4770      	bx	lr
 8000736:	bf00      	nop
 8000738:	20000010 	.word	0x20000010

0800073c <__libc_init_array>:
 800073c:	b570      	push	{r4, r5, r6, lr}
 800073e:	4d0d      	ldr	r5, [pc, #52]	; (8000774 <__libc_init_array+0x38>)
 8000740:	4c0d      	ldr	r4, [pc, #52]	; (8000778 <__libc_init_array+0x3c>)
 8000742:	1b64      	subs	r4, r4, r5
 8000744:	10a4      	asrs	r4, r4, #2
 8000746:	2600      	movs	r6, #0
 8000748:	42a6      	cmp	r6, r4
 800074a:	d109      	bne.n	8000760 <__libc_init_array+0x24>
 800074c:	4d0b      	ldr	r5, [pc, #44]	; (800077c <__libc_init_array+0x40>)
 800074e:	4c0c      	ldr	r4, [pc, #48]	; (8000780 <__libc_init_array+0x44>)
 8000750:	f000 ffe8 	bl	8001724 <_init>
 8000754:	1b64      	subs	r4, r4, r5
 8000756:	10a4      	asrs	r4, r4, #2
 8000758:	2600      	movs	r6, #0
 800075a:	42a6      	cmp	r6, r4
 800075c:	d105      	bne.n	800076a <__libc_init_array+0x2e>
 800075e:	bd70      	pop	{r4, r5, r6, pc}
 8000760:	f855 3b04 	ldr.w	r3, [r5], #4
 8000764:	4798      	blx	r3
 8000766:	3601      	adds	r6, #1
 8000768:	e7ee      	b.n	8000748 <__libc_init_array+0xc>
 800076a:	f855 3b04 	ldr.w	r3, [r5], #4
 800076e:	4798      	blx	r3
 8000770:	3601      	adds	r6, #1
 8000772:	e7f2      	b.n	800075a <__libc_init_array+0x1e>
 8000774:	08001868 	.word	0x08001868
 8000778:	08001868 	.word	0x08001868
 800077c:	08001868 	.word	0x08001868
 8000780:	0800186c 	.word	0x0800186c

08000784 <memset>:
 8000784:	4402      	add	r2, r0
 8000786:	4603      	mov	r3, r0
 8000788:	4293      	cmp	r3, r2
 800078a:	d100      	bne.n	800078e <memset+0xa>
 800078c:	4770      	bx	lr
 800078e:	f803 1b01 	strb.w	r1, [r3], #1
 8000792:	e7f9      	b.n	8000788 <memset+0x4>

08000794 <iprintf>:
 8000794:	b40f      	push	{r0, r1, r2, r3}
 8000796:	4b0a      	ldr	r3, [pc, #40]	; (80007c0 <iprintf+0x2c>)
 8000798:	b513      	push	{r0, r1, r4, lr}
 800079a:	681c      	ldr	r4, [r3, #0]
 800079c:	b124      	cbz	r4, 80007a8 <iprintf+0x14>
 800079e:	69a3      	ldr	r3, [r4, #24]
 80007a0:	b913      	cbnz	r3, 80007a8 <iprintf+0x14>
 80007a2:	4620      	mov	r0, r4
 80007a4:	f000 fa5e 	bl	8000c64 <__sinit>
 80007a8:	ab05      	add	r3, sp, #20
 80007aa:	9a04      	ldr	r2, [sp, #16]
 80007ac:	68a1      	ldr	r1, [r4, #8]
 80007ae:	9301      	str	r3, [sp, #4]
 80007b0:	4620      	mov	r0, r4
 80007b2:	f000 fc2b 	bl	800100c <_vfiprintf_r>
 80007b6:	b002      	add	sp, #8
 80007b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80007bc:	b004      	add	sp, #16
 80007be:	4770      	bx	lr
 80007c0:	20000010 	.word	0x20000010

080007c4 <_puts_r>:
 80007c4:	b570      	push	{r4, r5, r6, lr}
 80007c6:	460e      	mov	r6, r1
 80007c8:	4605      	mov	r5, r0
 80007ca:	b118      	cbz	r0, 80007d4 <_puts_r+0x10>
 80007cc:	6983      	ldr	r3, [r0, #24]
 80007ce:	b90b      	cbnz	r3, 80007d4 <_puts_r+0x10>
 80007d0:	f000 fa48 	bl	8000c64 <__sinit>
 80007d4:	69ab      	ldr	r3, [r5, #24]
 80007d6:	68ac      	ldr	r4, [r5, #8]
 80007d8:	b913      	cbnz	r3, 80007e0 <_puts_r+0x1c>
 80007da:	4628      	mov	r0, r5
 80007dc:	f000 fa42 	bl	8000c64 <__sinit>
 80007e0:	4b2c      	ldr	r3, [pc, #176]	; (8000894 <_puts_r+0xd0>)
 80007e2:	429c      	cmp	r4, r3
 80007e4:	d120      	bne.n	8000828 <_puts_r+0x64>
 80007e6:	686c      	ldr	r4, [r5, #4]
 80007e8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80007ea:	07db      	lsls	r3, r3, #31
 80007ec:	d405      	bmi.n	80007fa <_puts_r+0x36>
 80007ee:	89a3      	ldrh	r3, [r4, #12]
 80007f0:	0598      	lsls	r0, r3, #22
 80007f2:	d402      	bmi.n	80007fa <_puts_r+0x36>
 80007f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80007f6:	f000 fad3 	bl	8000da0 <__retarget_lock_acquire_recursive>
 80007fa:	89a3      	ldrh	r3, [r4, #12]
 80007fc:	0719      	lsls	r1, r3, #28
 80007fe:	d51d      	bpl.n	800083c <_puts_r+0x78>
 8000800:	6923      	ldr	r3, [r4, #16]
 8000802:	b1db      	cbz	r3, 800083c <_puts_r+0x78>
 8000804:	3e01      	subs	r6, #1
 8000806:	68a3      	ldr	r3, [r4, #8]
 8000808:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800080c:	3b01      	subs	r3, #1
 800080e:	60a3      	str	r3, [r4, #8]
 8000810:	bb39      	cbnz	r1, 8000862 <_puts_r+0x9e>
 8000812:	2b00      	cmp	r3, #0
 8000814:	da38      	bge.n	8000888 <_puts_r+0xc4>
 8000816:	4622      	mov	r2, r4
 8000818:	210a      	movs	r1, #10
 800081a:	4628      	mov	r0, r5
 800081c:	f000 f848 	bl	80008b0 <__swbuf_r>
 8000820:	3001      	adds	r0, #1
 8000822:	d011      	beq.n	8000848 <_puts_r+0x84>
 8000824:	250a      	movs	r5, #10
 8000826:	e011      	b.n	800084c <_puts_r+0x88>
 8000828:	4b1b      	ldr	r3, [pc, #108]	; (8000898 <_puts_r+0xd4>)
 800082a:	429c      	cmp	r4, r3
 800082c:	d101      	bne.n	8000832 <_puts_r+0x6e>
 800082e:	68ac      	ldr	r4, [r5, #8]
 8000830:	e7da      	b.n	80007e8 <_puts_r+0x24>
 8000832:	4b1a      	ldr	r3, [pc, #104]	; (800089c <_puts_r+0xd8>)
 8000834:	429c      	cmp	r4, r3
 8000836:	bf08      	it	eq
 8000838:	68ec      	ldreq	r4, [r5, #12]
 800083a:	e7d5      	b.n	80007e8 <_puts_r+0x24>
 800083c:	4621      	mov	r1, r4
 800083e:	4628      	mov	r0, r5
 8000840:	f000 f888 	bl	8000954 <__swsetup_r>
 8000844:	2800      	cmp	r0, #0
 8000846:	d0dd      	beq.n	8000804 <_puts_r+0x40>
 8000848:	f04f 35ff 	mov.w	r5, #4294967295
 800084c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800084e:	07da      	lsls	r2, r3, #31
 8000850:	d405      	bmi.n	800085e <_puts_r+0x9a>
 8000852:	89a3      	ldrh	r3, [r4, #12]
 8000854:	059b      	lsls	r3, r3, #22
 8000856:	d402      	bmi.n	800085e <_puts_r+0x9a>
 8000858:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800085a:	f000 faa2 	bl	8000da2 <__retarget_lock_release_recursive>
 800085e:	4628      	mov	r0, r5
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	2b00      	cmp	r3, #0
 8000864:	da04      	bge.n	8000870 <_puts_r+0xac>
 8000866:	69a2      	ldr	r2, [r4, #24]
 8000868:	429a      	cmp	r2, r3
 800086a:	dc06      	bgt.n	800087a <_puts_r+0xb6>
 800086c:	290a      	cmp	r1, #10
 800086e:	d004      	beq.n	800087a <_puts_r+0xb6>
 8000870:	6823      	ldr	r3, [r4, #0]
 8000872:	1c5a      	adds	r2, r3, #1
 8000874:	6022      	str	r2, [r4, #0]
 8000876:	7019      	strb	r1, [r3, #0]
 8000878:	e7c5      	b.n	8000806 <_puts_r+0x42>
 800087a:	4622      	mov	r2, r4
 800087c:	4628      	mov	r0, r5
 800087e:	f000 f817 	bl	80008b0 <__swbuf_r>
 8000882:	3001      	adds	r0, #1
 8000884:	d1bf      	bne.n	8000806 <_puts_r+0x42>
 8000886:	e7df      	b.n	8000848 <_puts_r+0x84>
 8000888:	6823      	ldr	r3, [r4, #0]
 800088a:	250a      	movs	r5, #10
 800088c:	1c5a      	adds	r2, r3, #1
 800088e:	6022      	str	r2, [r4, #0]
 8000890:	701d      	strb	r5, [r3, #0]
 8000892:	e7db      	b.n	800084c <_puts_r+0x88>
 8000894:	080017f4 	.word	0x080017f4
 8000898:	08001814 	.word	0x08001814
 800089c:	080017d4 	.word	0x080017d4

080008a0 <puts>:
 80008a0:	4b02      	ldr	r3, [pc, #8]	; (80008ac <puts+0xc>)
 80008a2:	4601      	mov	r1, r0
 80008a4:	6818      	ldr	r0, [r3, #0]
 80008a6:	f7ff bf8d 	b.w	80007c4 <_puts_r>
 80008aa:	bf00      	nop
 80008ac:	20000010 	.word	0x20000010

080008b0 <__swbuf_r>:
 80008b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80008b2:	460e      	mov	r6, r1
 80008b4:	4614      	mov	r4, r2
 80008b6:	4605      	mov	r5, r0
 80008b8:	b118      	cbz	r0, 80008c2 <__swbuf_r+0x12>
 80008ba:	6983      	ldr	r3, [r0, #24]
 80008bc:	b90b      	cbnz	r3, 80008c2 <__swbuf_r+0x12>
 80008be:	f000 f9d1 	bl	8000c64 <__sinit>
 80008c2:	4b21      	ldr	r3, [pc, #132]	; (8000948 <__swbuf_r+0x98>)
 80008c4:	429c      	cmp	r4, r3
 80008c6:	d12b      	bne.n	8000920 <__swbuf_r+0x70>
 80008c8:	686c      	ldr	r4, [r5, #4]
 80008ca:	69a3      	ldr	r3, [r4, #24]
 80008cc:	60a3      	str	r3, [r4, #8]
 80008ce:	89a3      	ldrh	r3, [r4, #12]
 80008d0:	071a      	lsls	r2, r3, #28
 80008d2:	d52f      	bpl.n	8000934 <__swbuf_r+0x84>
 80008d4:	6923      	ldr	r3, [r4, #16]
 80008d6:	b36b      	cbz	r3, 8000934 <__swbuf_r+0x84>
 80008d8:	6923      	ldr	r3, [r4, #16]
 80008da:	6820      	ldr	r0, [r4, #0]
 80008dc:	1ac0      	subs	r0, r0, r3
 80008de:	6963      	ldr	r3, [r4, #20]
 80008e0:	b2f6      	uxtb	r6, r6
 80008e2:	4283      	cmp	r3, r0
 80008e4:	4637      	mov	r7, r6
 80008e6:	dc04      	bgt.n	80008f2 <__swbuf_r+0x42>
 80008e8:	4621      	mov	r1, r4
 80008ea:	4628      	mov	r0, r5
 80008ec:	f000 f926 	bl	8000b3c <_fflush_r>
 80008f0:	bb30      	cbnz	r0, 8000940 <__swbuf_r+0x90>
 80008f2:	68a3      	ldr	r3, [r4, #8]
 80008f4:	3b01      	subs	r3, #1
 80008f6:	60a3      	str	r3, [r4, #8]
 80008f8:	6823      	ldr	r3, [r4, #0]
 80008fa:	1c5a      	adds	r2, r3, #1
 80008fc:	6022      	str	r2, [r4, #0]
 80008fe:	701e      	strb	r6, [r3, #0]
 8000900:	6963      	ldr	r3, [r4, #20]
 8000902:	3001      	adds	r0, #1
 8000904:	4283      	cmp	r3, r0
 8000906:	d004      	beq.n	8000912 <__swbuf_r+0x62>
 8000908:	89a3      	ldrh	r3, [r4, #12]
 800090a:	07db      	lsls	r3, r3, #31
 800090c:	d506      	bpl.n	800091c <__swbuf_r+0x6c>
 800090e:	2e0a      	cmp	r6, #10
 8000910:	d104      	bne.n	800091c <__swbuf_r+0x6c>
 8000912:	4621      	mov	r1, r4
 8000914:	4628      	mov	r0, r5
 8000916:	f000 f911 	bl	8000b3c <_fflush_r>
 800091a:	b988      	cbnz	r0, 8000940 <__swbuf_r+0x90>
 800091c:	4638      	mov	r0, r7
 800091e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000920:	4b0a      	ldr	r3, [pc, #40]	; (800094c <__swbuf_r+0x9c>)
 8000922:	429c      	cmp	r4, r3
 8000924:	d101      	bne.n	800092a <__swbuf_r+0x7a>
 8000926:	68ac      	ldr	r4, [r5, #8]
 8000928:	e7cf      	b.n	80008ca <__swbuf_r+0x1a>
 800092a:	4b09      	ldr	r3, [pc, #36]	; (8000950 <__swbuf_r+0xa0>)
 800092c:	429c      	cmp	r4, r3
 800092e:	bf08      	it	eq
 8000930:	68ec      	ldreq	r4, [r5, #12]
 8000932:	e7ca      	b.n	80008ca <__swbuf_r+0x1a>
 8000934:	4621      	mov	r1, r4
 8000936:	4628      	mov	r0, r5
 8000938:	f000 f80c 	bl	8000954 <__swsetup_r>
 800093c:	2800      	cmp	r0, #0
 800093e:	d0cb      	beq.n	80008d8 <__swbuf_r+0x28>
 8000940:	f04f 37ff 	mov.w	r7, #4294967295
 8000944:	e7ea      	b.n	800091c <__swbuf_r+0x6c>
 8000946:	bf00      	nop
 8000948:	080017f4 	.word	0x080017f4
 800094c:	08001814 	.word	0x08001814
 8000950:	080017d4 	.word	0x080017d4

08000954 <__swsetup_r>:
 8000954:	4b32      	ldr	r3, [pc, #200]	; (8000a20 <__swsetup_r+0xcc>)
 8000956:	b570      	push	{r4, r5, r6, lr}
 8000958:	681d      	ldr	r5, [r3, #0]
 800095a:	4606      	mov	r6, r0
 800095c:	460c      	mov	r4, r1
 800095e:	b125      	cbz	r5, 800096a <__swsetup_r+0x16>
 8000960:	69ab      	ldr	r3, [r5, #24]
 8000962:	b913      	cbnz	r3, 800096a <__swsetup_r+0x16>
 8000964:	4628      	mov	r0, r5
 8000966:	f000 f97d 	bl	8000c64 <__sinit>
 800096a:	4b2e      	ldr	r3, [pc, #184]	; (8000a24 <__swsetup_r+0xd0>)
 800096c:	429c      	cmp	r4, r3
 800096e:	d10f      	bne.n	8000990 <__swsetup_r+0x3c>
 8000970:	686c      	ldr	r4, [r5, #4]
 8000972:	89a3      	ldrh	r3, [r4, #12]
 8000974:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8000978:	0719      	lsls	r1, r3, #28
 800097a:	d42c      	bmi.n	80009d6 <__swsetup_r+0x82>
 800097c:	06dd      	lsls	r5, r3, #27
 800097e:	d411      	bmi.n	80009a4 <__swsetup_r+0x50>
 8000980:	2309      	movs	r3, #9
 8000982:	6033      	str	r3, [r6, #0]
 8000984:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8000988:	81a3      	strh	r3, [r4, #12]
 800098a:	f04f 30ff 	mov.w	r0, #4294967295
 800098e:	e03e      	b.n	8000a0e <__swsetup_r+0xba>
 8000990:	4b25      	ldr	r3, [pc, #148]	; (8000a28 <__swsetup_r+0xd4>)
 8000992:	429c      	cmp	r4, r3
 8000994:	d101      	bne.n	800099a <__swsetup_r+0x46>
 8000996:	68ac      	ldr	r4, [r5, #8]
 8000998:	e7eb      	b.n	8000972 <__swsetup_r+0x1e>
 800099a:	4b24      	ldr	r3, [pc, #144]	; (8000a2c <__swsetup_r+0xd8>)
 800099c:	429c      	cmp	r4, r3
 800099e:	bf08      	it	eq
 80009a0:	68ec      	ldreq	r4, [r5, #12]
 80009a2:	e7e6      	b.n	8000972 <__swsetup_r+0x1e>
 80009a4:	0758      	lsls	r0, r3, #29
 80009a6:	d512      	bpl.n	80009ce <__swsetup_r+0x7a>
 80009a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80009aa:	b141      	cbz	r1, 80009be <__swsetup_r+0x6a>
 80009ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80009b0:	4299      	cmp	r1, r3
 80009b2:	d002      	beq.n	80009ba <__swsetup_r+0x66>
 80009b4:	4630      	mov	r0, r6
 80009b6:	f000 fa59 	bl	8000e6c <_free_r>
 80009ba:	2300      	movs	r3, #0
 80009bc:	6363      	str	r3, [r4, #52]	; 0x34
 80009be:	89a3      	ldrh	r3, [r4, #12]
 80009c0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80009c4:	81a3      	strh	r3, [r4, #12]
 80009c6:	2300      	movs	r3, #0
 80009c8:	6063      	str	r3, [r4, #4]
 80009ca:	6923      	ldr	r3, [r4, #16]
 80009cc:	6023      	str	r3, [r4, #0]
 80009ce:	89a3      	ldrh	r3, [r4, #12]
 80009d0:	f043 0308 	orr.w	r3, r3, #8
 80009d4:	81a3      	strh	r3, [r4, #12]
 80009d6:	6923      	ldr	r3, [r4, #16]
 80009d8:	b94b      	cbnz	r3, 80009ee <__swsetup_r+0x9a>
 80009da:	89a3      	ldrh	r3, [r4, #12]
 80009dc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80009e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80009e4:	d003      	beq.n	80009ee <__swsetup_r+0x9a>
 80009e6:	4621      	mov	r1, r4
 80009e8:	4630      	mov	r0, r6
 80009ea:	f000 f9ff 	bl	8000dec <__smakebuf_r>
 80009ee:	89a0      	ldrh	r0, [r4, #12]
 80009f0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80009f4:	f010 0301 	ands.w	r3, r0, #1
 80009f8:	d00a      	beq.n	8000a10 <__swsetup_r+0xbc>
 80009fa:	2300      	movs	r3, #0
 80009fc:	60a3      	str	r3, [r4, #8]
 80009fe:	6963      	ldr	r3, [r4, #20]
 8000a00:	425b      	negs	r3, r3
 8000a02:	61a3      	str	r3, [r4, #24]
 8000a04:	6923      	ldr	r3, [r4, #16]
 8000a06:	b943      	cbnz	r3, 8000a1a <__swsetup_r+0xc6>
 8000a08:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8000a0c:	d1ba      	bne.n	8000984 <__swsetup_r+0x30>
 8000a0e:	bd70      	pop	{r4, r5, r6, pc}
 8000a10:	0781      	lsls	r1, r0, #30
 8000a12:	bf58      	it	pl
 8000a14:	6963      	ldrpl	r3, [r4, #20]
 8000a16:	60a3      	str	r3, [r4, #8]
 8000a18:	e7f4      	b.n	8000a04 <__swsetup_r+0xb0>
 8000a1a:	2000      	movs	r0, #0
 8000a1c:	e7f7      	b.n	8000a0e <__swsetup_r+0xba>
 8000a1e:	bf00      	nop
 8000a20:	20000010 	.word	0x20000010
 8000a24:	080017f4 	.word	0x080017f4
 8000a28:	08001814 	.word	0x08001814
 8000a2c:	080017d4 	.word	0x080017d4

08000a30 <__sflush_r>:
 8000a30:	898a      	ldrh	r2, [r1, #12]
 8000a32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000a36:	4605      	mov	r5, r0
 8000a38:	0710      	lsls	r0, r2, #28
 8000a3a:	460c      	mov	r4, r1
 8000a3c:	d458      	bmi.n	8000af0 <__sflush_r+0xc0>
 8000a3e:	684b      	ldr	r3, [r1, #4]
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	dc05      	bgt.n	8000a50 <__sflush_r+0x20>
 8000a44:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	dc02      	bgt.n	8000a50 <__sflush_r+0x20>
 8000a4a:	2000      	movs	r0, #0
 8000a4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000a50:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000a52:	2e00      	cmp	r6, #0
 8000a54:	d0f9      	beq.n	8000a4a <__sflush_r+0x1a>
 8000a56:	2300      	movs	r3, #0
 8000a58:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8000a5c:	682f      	ldr	r7, [r5, #0]
 8000a5e:	602b      	str	r3, [r5, #0]
 8000a60:	d032      	beq.n	8000ac8 <__sflush_r+0x98>
 8000a62:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8000a64:	89a3      	ldrh	r3, [r4, #12]
 8000a66:	075a      	lsls	r2, r3, #29
 8000a68:	d505      	bpl.n	8000a76 <__sflush_r+0x46>
 8000a6a:	6863      	ldr	r3, [r4, #4]
 8000a6c:	1ac0      	subs	r0, r0, r3
 8000a6e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000a70:	b10b      	cbz	r3, 8000a76 <__sflush_r+0x46>
 8000a72:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000a74:	1ac0      	subs	r0, r0, r3
 8000a76:	2300      	movs	r3, #0
 8000a78:	4602      	mov	r2, r0
 8000a7a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000a7c:	6a21      	ldr	r1, [r4, #32]
 8000a7e:	4628      	mov	r0, r5
 8000a80:	47b0      	blx	r6
 8000a82:	1c43      	adds	r3, r0, #1
 8000a84:	89a3      	ldrh	r3, [r4, #12]
 8000a86:	d106      	bne.n	8000a96 <__sflush_r+0x66>
 8000a88:	6829      	ldr	r1, [r5, #0]
 8000a8a:	291d      	cmp	r1, #29
 8000a8c:	d82c      	bhi.n	8000ae8 <__sflush_r+0xb8>
 8000a8e:	4a2a      	ldr	r2, [pc, #168]	; (8000b38 <__sflush_r+0x108>)
 8000a90:	40ca      	lsrs	r2, r1
 8000a92:	07d6      	lsls	r6, r2, #31
 8000a94:	d528      	bpl.n	8000ae8 <__sflush_r+0xb8>
 8000a96:	2200      	movs	r2, #0
 8000a98:	6062      	str	r2, [r4, #4]
 8000a9a:	04d9      	lsls	r1, r3, #19
 8000a9c:	6922      	ldr	r2, [r4, #16]
 8000a9e:	6022      	str	r2, [r4, #0]
 8000aa0:	d504      	bpl.n	8000aac <__sflush_r+0x7c>
 8000aa2:	1c42      	adds	r2, r0, #1
 8000aa4:	d101      	bne.n	8000aaa <__sflush_r+0x7a>
 8000aa6:	682b      	ldr	r3, [r5, #0]
 8000aa8:	b903      	cbnz	r3, 8000aac <__sflush_r+0x7c>
 8000aaa:	6560      	str	r0, [r4, #84]	; 0x54
 8000aac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000aae:	602f      	str	r7, [r5, #0]
 8000ab0:	2900      	cmp	r1, #0
 8000ab2:	d0ca      	beq.n	8000a4a <__sflush_r+0x1a>
 8000ab4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000ab8:	4299      	cmp	r1, r3
 8000aba:	d002      	beq.n	8000ac2 <__sflush_r+0x92>
 8000abc:	4628      	mov	r0, r5
 8000abe:	f000 f9d5 	bl	8000e6c <_free_r>
 8000ac2:	2000      	movs	r0, #0
 8000ac4:	6360      	str	r0, [r4, #52]	; 0x34
 8000ac6:	e7c1      	b.n	8000a4c <__sflush_r+0x1c>
 8000ac8:	6a21      	ldr	r1, [r4, #32]
 8000aca:	2301      	movs	r3, #1
 8000acc:	4628      	mov	r0, r5
 8000ace:	47b0      	blx	r6
 8000ad0:	1c41      	adds	r1, r0, #1
 8000ad2:	d1c7      	bne.n	8000a64 <__sflush_r+0x34>
 8000ad4:	682b      	ldr	r3, [r5, #0]
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d0c4      	beq.n	8000a64 <__sflush_r+0x34>
 8000ada:	2b1d      	cmp	r3, #29
 8000adc:	d001      	beq.n	8000ae2 <__sflush_r+0xb2>
 8000ade:	2b16      	cmp	r3, #22
 8000ae0:	d101      	bne.n	8000ae6 <__sflush_r+0xb6>
 8000ae2:	602f      	str	r7, [r5, #0]
 8000ae4:	e7b1      	b.n	8000a4a <__sflush_r+0x1a>
 8000ae6:	89a3      	ldrh	r3, [r4, #12]
 8000ae8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000aec:	81a3      	strh	r3, [r4, #12]
 8000aee:	e7ad      	b.n	8000a4c <__sflush_r+0x1c>
 8000af0:	690f      	ldr	r7, [r1, #16]
 8000af2:	2f00      	cmp	r7, #0
 8000af4:	d0a9      	beq.n	8000a4a <__sflush_r+0x1a>
 8000af6:	0793      	lsls	r3, r2, #30
 8000af8:	680e      	ldr	r6, [r1, #0]
 8000afa:	bf08      	it	eq
 8000afc:	694b      	ldreq	r3, [r1, #20]
 8000afe:	600f      	str	r7, [r1, #0]
 8000b00:	bf18      	it	ne
 8000b02:	2300      	movne	r3, #0
 8000b04:	eba6 0807 	sub.w	r8, r6, r7
 8000b08:	608b      	str	r3, [r1, #8]
 8000b0a:	f1b8 0f00 	cmp.w	r8, #0
 8000b0e:	dd9c      	ble.n	8000a4a <__sflush_r+0x1a>
 8000b10:	6a21      	ldr	r1, [r4, #32]
 8000b12:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8000b14:	4643      	mov	r3, r8
 8000b16:	463a      	mov	r2, r7
 8000b18:	4628      	mov	r0, r5
 8000b1a:	47b0      	blx	r6
 8000b1c:	2800      	cmp	r0, #0
 8000b1e:	dc06      	bgt.n	8000b2e <__sflush_r+0xfe>
 8000b20:	89a3      	ldrh	r3, [r4, #12]
 8000b22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b26:	81a3      	strh	r3, [r4, #12]
 8000b28:	f04f 30ff 	mov.w	r0, #4294967295
 8000b2c:	e78e      	b.n	8000a4c <__sflush_r+0x1c>
 8000b2e:	4407      	add	r7, r0
 8000b30:	eba8 0800 	sub.w	r8, r8, r0
 8000b34:	e7e9      	b.n	8000b0a <__sflush_r+0xda>
 8000b36:	bf00      	nop
 8000b38:	20400001 	.word	0x20400001

08000b3c <_fflush_r>:
 8000b3c:	b538      	push	{r3, r4, r5, lr}
 8000b3e:	690b      	ldr	r3, [r1, #16]
 8000b40:	4605      	mov	r5, r0
 8000b42:	460c      	mov	r4, r1
 8000b44:	b913      	cbnz	r3, 8000b4c <_fflush_r+0x10>
 8000b46:	2500      	movs	r5, #0
 8000b48:	4628      	mov	r0, r5
 8000b4a:	bd38      	pop	{r3, r4, r5, pc}
 8000b4c:	b118      	cbz	r0, 8000b56 <_fflush_r+0x1a>
 8000b4e:	6983      	ldr	r3, [r0, #24]
 8000b50:	b90b      	cbnz	r3, 8000b56 <_fflush_r+0x1a>
 8000b52:	f000 f887 	bl	8000c64 <__sinit>
 8000b56:	4b14      	ldr	r3, [pc, #80]	; (8000ba8 <_fflush_r+0x6c>)
 8000b58:	429c      	cmp	r4, r3
 8000b5a:	d11b      	bne.n	8000b94 <_fflush_r+0x58>
 8000b5c:	686c      	ldr	r4, [r5, #4]
 8000b5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d0ef      	beq.n	8000b46 <_fflush_r+0xa>
 8000b66:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8000b68:	07d0      	lsls	r0, r2, #31
 8000b6a:	d404      	bmi.n	8000b76 <_fflush_r+0x3a>
 8000b6c:	0599      	lsls	r1, r3, #22
 8000b6e:	d402      	bmi.n	8000b76 <_fflush_r+0x3a>
 8000b70:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000b72:	f000 f915 	bl	8000da0 <__retarget_lock_acquire_recursive>
 8000b76:	4628      	mov	r0, r5
 8000b78:	4621      	mov	r1, r4
 8000b7a:	f7ff ff59 	bl	8000a30 <__sflush_r>
 8000b7e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000b80:	07da      	lsls	r2, r3, #31
 8000b82:	4605      	mov	r5, r0
 8000b84:	d4e0      	bmi.n	8000b48 <_fflush_r+0xc>
 8000b86:	89a3      	ldrh	r3, [r4, #12]
 8000b88:	059b      	lsls	r3, r3, #22
 8000b8a:	d4dd      	bmi.n	8000b48 <_fflush_r+0xc>
 8000b8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000b8e:	f000 f908 	bl	8000da2 <__retarget_lock_release_recursive>
 8000b92:	e7d9      	b.n	8000b48 <_fflush_r+0xc>
 8000b94:	4b05      	ldr	r3, [pc, #20]	; (8000bac <_fflush_r+0x70>)
 8000b96:	429c      	cmp	r4, r3
 8000b98:	d101      	bne.n	8000b9e <_fflush_r+0x62>
 8000b9a:	68ac      	ldr	r4, [r5, #8]
 8000b9c:	e7df      	b.n	8000b5e <_fflush_r+0x22>
 8000b9e:	4b04      	ldr	r3, [pc, #16]	; (8000bb0 <_fflush_r+0x74>)
 8000ba0:	429c      	cmp	r4, r3
 8000ba2:	bf08      	it	eq
 8000ba4:	68ec      	ldreq	r4, [r5, #12]
 8000ba6:	e7da      	b.n	8000b5e <_fflush_r+0x22>
 8000ba8:	080017f4 	.word	0x080017f4
 8000bac:	08001814 	.word	0x08001814
 8000bb0:	080017d4 	.word	0x080017d4

08000bb4 <std>:
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	b510      	push	{r4, lr}
 8000bb8:	4604      	mov	r4, r0
 8000bba:	e9c0 3300 	strd	r3, r3, [r0]
 8000bbe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000bc2:	6083      	str	r3, [r0, #8]
 8000bc4:	8181      	strh	r1, [r0, #12]
 8000bc6:	6643      	str	r3, [r0, #100]	; 0x64
 8000bc8:	81c2      	strh	r2, [r0, #14]
 8000bca:	6183      	str	r3, [r0, #24]
 8000bcc:	4619      	mov	r1, r3
 8000bce:	2208      	movs	r2, #8
 8000bd0:	305c      	adds	r0, #92	; 0x5c
 8000bd2:	f7ff fdd7 	bl	8000784 <memset>
 8000bd6:	4b05      	ldr	r3, [pc, #20]	; (8000bec <std+0x38>)
 8000bd8:	6263      	str	r3, [r4, #36]	; 0x24
 8000bda:	4b05      	ldr	r3, [pc, #20]	; (8000bf0 <std+0x3c>)
 8000bdc:	62a3      	str	r3, [r4, #40]	; 0x28
 8000bde:	4b05      	ldr	r3, [pc, #20]	; (8000bf4 <std+0x40>)
 8000be0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000be2:	4b05      	ldr	r3, [pc, #20]	; (8000bf8 <std+0x44>)
 8000be4:	6224      	str	r4, [r4, #32]
 8000be6:	6323      	str	r3, [r4, #48]	; 0x30
 8000be8:	bd10      	pop	{r4, pc}
 8000bea:	bf00      	nop
 8000bec:	080015b5 	.word	0x080015b5
 8000bf0:	080015d7 	.word	0x080015d7
 8000bf4:	0800160f 	.word	0x0800160f
 8000bf8:	08001633 	.word	0x08001633

08000bfc <_cleanup_r>:
 8000bfc:	4901      	ldr	r1, [pc, #4]	; (8000c04 <_cleanup_r+0x8>)
 8000bfe:	f000 b8af 	b.w	8000d60 <_fwalk_reent>
 8000c02:	bf00      	nop
 8000c04:	08000b3d 	.word	0x08000b3d

08000c08 <__sfmoreglue>:
 8000c08:	b570      	push	{r4, r5, r6, lr}
 8000c0a:	1e4a      	subs	r2, r1, #1
 8000c0c:	2568      	movs	r5, #104	; 0x68
 8000c0e:	4355      	muls	r5, r2
 8000c10:	460e      	mov	r6, r1
 8000c12:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8000c16:	f000 f977 	bl	8000f08 <_malloc_r>
 8000c1a:	4604      	mov	r4, r0
 8000c1c:	b140      	cbz	r0, 8000c30 <__sfmoreglue+0x28>
 8000c1e:	2100      	movs	r1, #0
 8000c20:	e9c0 1600 	strd	r1, r6, [r0]
 8000c24:	300c      	adds	r0, #12
 8000c26:	60a0      	str	r0, [r4, #8]
 8000c28:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8000c2c:	f7ff fdaa 	bl	8000784 <memset>
 8000c30:	4620      	mov	r0, r4
 8000c32:	bd70      	pop	{r4, r5, r6, pc}

08000c34 <__sfp_lock_acquire>:
 8000c34:	4801      	ldr	r0, [pc, #4]	; (8000c3c <__sfp_lock_acquire+0x8>)
 8000c36:	f000 b8b3 	b.w	8000da0 <__retarget_lock_acquire_recursive>
 8000c3a:	bf00      	nop
 8000c3c:	200000b8 	.word	0x200000b8

08000c40 <__sfp_lock_release>:
 8000c40:	4801      	ldr	r0, [pc, #4]	; (8000c48 <__sfp_lock_release+0x8>)
 8000c42:	f000 b8ae 	b.w	8000da2 <__retarget_lock_release_recursive>
 8000c46:	bf00      	nop
 8000c48:	200000b8 	.word	0x200000b8

08000c4c <__sinit_lock_acquire>:
 8000c4c:	4801      	ldr	r0, [pc, #4]	; (8000c54 <__sinit_lock_acquire+0x8>)
 8000c4e:	f000 b8a7 	b.w	8000da0 <__retarget_lock_acquire_recursive>
 8000c52:	bf00      	nop
 8000c54:	200000b3 	.word	0x200000b3

08000c58 <__sinit_lock_release>:
 8000c58:	4801      	ldr	r0, [pc, #4]	; (8000c60 <__sinit_lock_release+0x8>)
 8000c5a:	f000 b8a2 	b.w	8000da2 <__retarget_lock_release_recursive>
 8000c5e:	bf00      	nop
 8000c60:	200000b3 	.word	0x200000b3

08000c64 <__sinit>:
 8000c64:	b510      	push	{r4, lr}
 8000c66:	4604      	mov	r4, r0
 8000c68:	f7ff fff0 	bl	8000c4c <__sinit_lock_acquire>
 8000c6c:	69a3      	ldr	r3, [r4, #24]
 8000c6e:	b11b      	cbz	r3, 8000c78 <__sinit+0x14>
 8000c70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000c74:	f7ff bff0 	b.w	8000c58 <__sinit_lock_release>
 8000c78:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8000c7c:	6523      	str	r3, [r4, #80]	; 0x50
 8000c7e:	4b13      	ldr	r3, [pc, #76]	; (8000ccc <__sinit+0x68>)
 8000c80:	4a13      	ldr	r2, [pc, #76]	; (8000cd0 <__sinit+0x6c>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	62a2      	str	r2, [r4, #40]	; 0x28
 8000c86:	42a3      	cmp	r3, r4
 8000c88:	bf04      	itt	eq
 8000c8a:	2301      	moveq	r3, #1
 8000c8c:	61a3      	streq	r3, [r4, #24]
 8000c8e:	4620      	mov	r0, r4
 8000c90:	f000 f820 	bl	8000cd4 <__sfp>
 8000c94:	6060      	str	r0, [r4, #4]
 8000c96:	4620      	mov	r0, r4
 8000c98:	f000 f81c 	bl	8000cd4 <__sfp>
 8000c9c:	60a0      	str	r0, [r4, #8]
 8000c9e:	4620      	mov	r0, r4
 8000ca0:	f000 f818 	bl	8000cd4 <__sfp>
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	60e0      	str	r0, [r4, #12]
 8000ca8:	2104      	movs	r1, #4
 8000caa:	6860      	ldr	r0, [r4, #4]
 8000cac:	f7ff ff82 	bl	8000bb4 <std>
 8000cb0:	68a0      	ldr	r0, [r4, #8]
 8000cb2:	2201      	movs	r2, #1
 8000cb4:	2109      	movs	r1, #9
 8000cb6:	f7ff ff7d 	bl	8000bb4 <std>
 8000cba:	68e0      	ldr	r0, [r4, #12]
 8000cbc:	2202      	movs	r2, #2
 8000cbe:	2112      	movs	r1, #18
 8000cc0:	f7ff ff78 	bl	8000bb4 <std>
 8000cc4:	2301      	movs	r3, #1
 8000cc6:	61a3      	str	r3, [r4, #24]
 8000cc8:	e7d2      	b.n	8000c70 <__sinit+0xc>
 8000cca:	bf00      	nop
 8000ccc:	080017d0 	.word	0x080017d0
 8000cd0:	08000bfd 	.word	0x08000bfd

08000cd4 <__sfp>:
 8000cd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000cd6:	4607      	mov	r7, r0
 8000cd8:	f7ff ffac 	bl	8000c34 <__sfp_lock_acquire>
 8000cdc:	4b1e      	ldr	r3, [pc, #120]	; (8000d58 <__sfp+0x84>)
 8000cde:	681e      	ldr	r6, [r3, #0]
 8000ce0:	69b3      	ldr	r3, [r6, #24]
 8000ce2:	b913      	cbnz	r3, 8000cea <__sfp+0x16>
 8000ce4:	4630      	mov	r0, r6
 8000ce6:	f7ff ffbd 	bl	8000c64 <__sinit>
 8000cea:	3648      	adds	r6, #72	; 0x48
 8000cec:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8000cf0:	3b01      	subs	r3, #1
 8000cf2:	d503      	bpl.n	8000cfc <__sfp+0x28>
 8000cf4:	6833      	ldr	r3, [r6, #0]
 8000cf6:	b30b      	cbz	r3, 8000d3c <__sfp+0x68>
 8000cf8:	6836      	ldr	r6, [r6, #0]
 8000cfa:	e7f7      	b.n	8000cec <__sfp+0x18>
 8000cfc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8000d00:	b9d5      	cbnz	r5, 8000d38 <__sfp+0x64>
 8000d02:	4b16      	ldr	r3, [pc, #88]	; (8000d5c <__sfp+0x88>)
 8000d04:	60e3      	str	r3, [r4, #12]
 8000d06:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8000d0a:	6665      	str	r5, [r4, #100]	; 0x64
 8000d0c:	f000 f847 	bl	8000d9e <__retarget_lock_init_recursive>
 8000d10:	f7ff ff96 	bl	8000c40 <__sfp_lock_release>
 8000d14:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8000d18:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8000d1c:	6025      	str	r5, [r4, #0]
 8000d1e:	61a5      	str	r5, [r4, #24]
 8000d20:	2208      	movs	r2, #8
 8000d22:	4629      	mov	r1, r5
 8000d24:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8000d28:	f7ff fd2c 	bl	8000784 <memset>
 8000d2c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8000d30:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8000d34:	4620      	mov	r0, r4
 8000d36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000d38:	3468      	adds	r4, #104	; 0x68
 8000d3a:	e7d9      	b.n	8000cf0 <__sfp+0x1c>
 8000d3c:	2104      	movs	r1, #4
 8000d3e:	4638      	mov	r0, r7
 8000d40:	f7ff ff62 	bl	8000c08 <__sfmoreglue>
 8000d44:	4604      	mov	r4, r0
 8000d46:	6030      	str	r0, [r6, #0]
 8000d48:	2800      	cmp	r0, #0
 8000d4a:	d1d5      	bne.n	8000cf8 <__sfp+0x24>
 8000d4c:	f7ff ff78 	bl	8000c40 <__sfp_lock_release>
 8000d50:	230c      	movs	r3, #12
 8000d52:	603b      	str	r3, [r7, #0]
 8000d54:	e7ee      	b.n	8000d34 <__sfp+0x60>
 8000d56:	bf00      	nop
 8000d58:	080017d0 	.word	0x080017d0
 8000d5c:	ffff0001 	.word	0xffff0001

08000d60 <_fwalk_reent>:
 8000d60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000d64:	4606      	mov	r6, r0
 8000d66:	4688      	mov	r8, r1
 8000d68:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8000d6c:	2700      	movs	r7, #0
 8000d6e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000d72:	f1b9 0901 	subs.w	r9, r9, #1
 8000d76:	d505      	bpl.n	8000d84 <_fwalk_reent+0x24>
 8000d78:	6824      	ldr	r4, [r4, #0]
 8000d7a:	2c00      	cmp	r4, #0
 8000d7c:	d1f7      	bne.n	8000d6e <_fwalk_reent+0xe>
 8000d7e:	4638      	mov	r0, r7
 8000d80:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000d84:	89ab      	ldrh	r3, [r5, #12]
 8000d86:	2b01      	cmp	r3, #1
 8000d88:	d907      	bls.n	8000d9a <_fwalk_reent+0x3a>
 8000d8a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000d8e:	3301      	adds	r3, #1
 8000d90:	d003      	beq.n	8000d9a <_fwalk_reent+0x3a>
 8000d92:	4629      	mov	r1, r5
 8000d94:	4630      	mov	r0, r6
 8000d96:	47c0      	blx	r8
 8000d98:	4307      	orrs	r7, r0
 8000d9a:	3568      	adds	r5, #104	; 0x68
 8000d9c:	e7e9      	b.n	8000d72 <_fwalk_reent+0x12>

08000d9e <__retarget_lock_init_recursive>:
 8000d9e:	4770      	bx	lr

08000da0 <__retarget_lock_acquire_recursive>:
 8000da0:	4770      	bx	lr

08000da2 <__retarget_lock_release_recursive>:
 8000da2:	4770      	bx	lr

08000da4 <__swhatbuf_r>:
 8000da4:	b570      	push	{r4, r5, r6, lr}
 8000da6:	460e      	mov	r6, r1
 8000da8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000dac:	2900      	cmp	r1, #0
 8000dae:	b096      	sub	sp, #88	; 0x58
 8000db0:	4614      	mov	r4, r2
 8000db2:	461d      	mov	r5, r3
 8000db4:	da07      	bge.n	8000dc6 <__swhatbuf_r+0x22>
 8000db6:	2300      	movs	r3, #0
 8000db8:	602b      	str	r3, [r5, #0]
 8000dba:	89b3      	ldrh	r3, [r6, #12]
 8000dbc:	061a      	lsls	r2, r3, #24
 8000dbe:	d410      	bmi.n	8000de2 <__swhatbuf_r+0x3e>
 8000dc0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000dc4:	e00e      	b.n	8000de4 <__swhatbuf_r+0x40>
 8000dc6:	466a      	mov	r2, sp
 8000dc8:	f000 fc5a 	bl	8001680 <_fstat_r>
 8000dcc:	2800      	cmp	r0, #0
 8000dce:	dbf2      	blt.n	8000db6 <__swhatbuf_r+0x12>
 8000dd0:	9a01      	ldr	r2, [sp, #4]
 8000dd2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8000dd6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8000dda:	425a      	negs	r2, r3
 8000ddc:	415a      	adcs	r2, r3
 8000dde:	602a      	str	r2, [r5, #0]
 8000de0:	e7ee      	b.n	8000dc0 <__swhatbuf_r+0x1c>
 8000de2:	2340      	movs	r3, #64	; 0x40
 8000de4:	2000      	movs	r0, #0
 8000de6:	6023      	str	r3, [r4, #0]
 8000de8:	b016      	add	sp, #88	; 0x58
 8000dea:	bd70      	pop	{r4, r5, r6, pc}

08000dec <__smakebuf_r>:
 8000dec:	898b      	ldrh	r3, [r1, #12]
 8000dee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8000df0:	079d      	lsls	r5, r3, #30
 8000df2:	4606      	mov	r6, r0
 8000df4:	460c      	mov	r4, r1
 8000df6:	d507      	bpl.n	8000e08 <__smakebuf_r+0x1c>
 8000df8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8000dfc:	6023      	str	r3, [r4, #0]
 8000dfe:	6123      	str	r3, [r4, #16]
 8000e00:	2301      	movs	r3, #1
 8000e02:	6163      	str	r3, [r4, #20]
 8000e04:	b002      	add	sp, #8
 8000e06:	bd70      	pop	{r4, r5, r6, pc}
 8000e08:	ab01      	add	r3, sp, #4
 8000e0a:	466a      	mov	r2, sp
 8000e0c:	f7ff ffca 	bl	8000da4 <__swhatbuf_r>
 8000e10:	9900      	ldr	r1, [sp, #0]
 8000e12:	4605      	mov	r5, r0
 8000e14:	4630      	mov	r0, r6
 8000e16:	f000 f877 	bl	8000f08 <_malloc_r>
 8000e1a:	b948      	cbnz	r0, 8000e30 <__smakebuf_r+0x44>
 8000e1c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000e20:	059a      	lsls	r2, r3, #22
 8000e22:	d4ef      	bmi.n	8000e04 <__smakebuf_r+0x18>
 8000e24:	f023 0303 	bic.w	r3, r3, #3
 8000e28:	f043 0302 	orr.w	r3, r3, #2
 8000e2c:	81a3      	strh	r3, [r4, #12]
 8000e2e:	e7e3      	b.n	8000df8 <__smakebuf_r+0xc>
 8000e30:	4b0d      	ldr	r3, [pc, #52]	; (8000e68 <__smakebuf_r+0x7c>)
 8000e32:	62b3      	str	r3, [r6, #40]	; 0x28
 8000e34:	89a3      	ldrh	r3, [r4, #12]
 8000e36:	6020      	str	r0, [r4, #0]
 8000e38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e3c:	81a3      	strh	r3, [r4, #12]
 8000e3e:	9b00      	ldr	r3, [sp, #0]
 8000e40:	6163      	str	r3, [r4, #20]
 8000e42:	9b01      	ldr	r3, [sp, #4]
 8000e44:	6120      	str	r0, [r4, #16]
 8000e46:	b15b      	cbz	r3, 8000e60 <__smakebuf_r+0x74>
 8000e48:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000e4c:	4630      	mov	r0, r6
 8000e4e:	f000 fc29 	bl	80016a4 <_isatty_r>
 8000e52:	b128      	cbz	r0, 8000e60 <__smakebuf_r+0x74>
 8000e54:	89a3      	ldrh	r3, [r4, #12]
 8000e56:	f023 0303 	bic.w	r3, r3, #3
 8000e5a:	f043 0301 	orr.w	r3, r3, #1
 8000e5e:	81a3      	strh	r3, [r4, #12]
 8000e60:	89a0      	ldrh	r0, [r4, #12]
 8000e62:	4305      	orrs	r5, r0
 8000e64:	81a5      	strh	r5, [r4, #12]
 8000e66:	e7cd      	b.n	8000e04 <__smakebuf_r+0x18>
 8000e68:	08000bfd 	.word	0x08000bfd

08000e6c <_free_r>:
 8000e6c:	b538      	push	{r3, r4, r5, lr}
 8000e6e:	4605      	mov	r5, r0
 8000e70:	2900      	cmp	r1, #0
 8000e72:	d045      	beq.n	8000f00 <_free_r+0x94>
 8000e74:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000e78:	1f0c      	subs	r4, r1, #4
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	bfb8      	it	lt
 8000e7e:	18e4      	addlt	r4, r4, r3
 8000e80:	f000 fc32 	bl	80016e8 <__malloc_lock>
 8000e84:	4a1f      	ldr	r2, [pc, #124]	; (8000f04 <_free_r+0x98>)
 8000e86:	6813      	ldr	r3, [r2, #0]
 8000e88:	4610      	mov	r0, r2
 8000e8a:	b933      	cbnz	r3, 8000e9a <_free_r+0x2e>
 8000e8c:	6063      	str	r3, [r4, #4]
 8000e8e:	6014      	str	r4, [r2, #0]
 8000e90:	4628      	mov	r0, r5
 8000e92:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000e96:	f000 bc2d 	b.w	80016f4 <__malloc_unlock>
 8000e9a:	42a3      	cmp	r3, r4
 8000e9c:	d90b      	bls.n	8000eb6 <_free_r+0x4a>
 8000e9e:	6821      	ldr	r1, [r4, #0]
 8000ea0:	1862      	adds	r2, r4, r1
 8000ea2:	4293      	cmp	r3, r2
 8000ea4:	bf04      	itt	eq
 8000ea6:	681a      	ldreq	r2, [r3, #0]
 8000ea8:	685b      	ldreq	r3, [r3, #4]
 8000eaa:	6063      	str	r3, [r4, #4]
 8000eac:	bf04      	itt	eq
 8000eae:	1852      	addeq	r2, r2, r1
 8000eb0:	6022      	streq	r2, [r4, #0]
 8000eb2:	6004      	str	r4, [r0, #0]
 8000eb4:	e7ec      	b.n	8000e90 <_free_r+0x24>
 8000eb6:	461a      	mov	r2, r3
 8000eb8:	685b      	ldr	r3, [r3, #4]
 8000eba:	b10b      	cbz	r3, 8000ec0 <_free_r+0x54>
 8000ebc:	42a3      	cmp	r3, r4
 8000ebe:	d9fa      	bls.n	8000eb6 <_free_r+0x4a>
 8000ec0:	6811      	ldr	r1, [r2, #0]
 8000ec2:	1850      	adds	r0, r2, r1
 8000ec4:	42a0      	cmp	r0, r4
 8000ec6:	d10b      	bne.n	8000ee0 <_free_r+0x74>
 8000ec8:	6820      	ldr	r0, [r4, #0]
 8000eca:	4401      	add	r1, r0
 8000ecc:	1850      	adds	r0, r2, r1
 8000ece:	4283      	cmp	r3, r0
 8000ed0:	6011      	str	r1, [r2, #0]
 8000ed2:	d1dd      	bne.n	8000e90 <_free_r+0x24>
 8000ed4:	6818      	ldr	r0, [r3, #0]
 8000ed6:	685b      	ldr	r3, [r3, #4]
 8000ed8:	6053      	str	r3, [r2, #4]
 8000eda:	4401      	add	r1, r0
 8000edc:	6011      	str	r1, [r2, #0]
 8000ede:	e7d7      	b.n	8000e90 <_free_r+0x24>
 8000ee0:	d902      	bls.n	8000ee8 <_free_r+0x7c>
 8000ee2:	230c      	movs	r3, #12
 8000ee4:	602b      	str	r3, [r5, #0]
 8000ee6:	e7d3      	b.n	8000e90 <_free_r+0x24>
 8000ee8:	6820      	ldr	r0, [r4, #0]
 8000eea:	1821      	adds	r1, r4, r0
 8000eec:	428b      	cmp	r3, r1
 8000eee:	bf04      	itt	eq
 8000ef0:	6819      	ldreq	r1, [r3, #0]
 8000ef2:	685b      	ldreq	r3, [r3, #4]
 8000ef4:	6063      	str	r3, [r4, #4]
 8000ef6:	bf04      	itt	eq
 8000ef8:	1809      	addeq	r1, r1, r0
 8000efa:	6021      	streq	r1, [r4, #0]
 8000efc:	6054      	str	r4, [r2, #4]
 8000efe:	e7c7      	b.n	8000e90 <_free_r+0x24>
 8000f00:	bd38      	pop	{r3, r4, r5, pc}
 8000f02:	bf00      	nop
 8000f04:	20000098 	.word	0x20000098

08000f08 <_malloc_r>:
 8000f08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f0a:	1ccd      	adds	r5, r1, #3
 8000f0c:	f025 0503 	bic.w	r5, r5, #3
 8000f10:	3508      	adds	r5, #8
 8000f12:	2d0c      	cmp	r5, #12
 8000f14:	bf38      	it	cc
 8000f16:	250c      	movcc	r5, #12
 8000f18:	2d00      	cmp	r5, #0
 8000f1a:	4606      	mov	r6, r0
 8000f1c:	db01      	blt.n	8000f22 <_malloc_r+0x1a>
 8000f1e:	42a9      	cmp	r1, r5
 8000f20:	d903      	bls.n	8000f2a <_malloc_r+0x22>
 8000f22:	230c      	movs	r3, #12
 8000f24:	6033      	str	r3, [r6, #0]
 8000f26:	2000      	movs	r0, #0
 8000f28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000f2a:	f000 fbdd 	bl	80016e8 <__malloc_lock>
 8000f2e:	4921      	ldr	r1, [pc, #132]	; (8000fb4 <_malloc_r+0xac>)
 8000f30:	680a      	ldr	r2, [r1, #0]
 8000f32:	4614      	mov	r4, r2
 8000f34:	b99c      	cbnz	r4, 8000f5e <_malloc_r+0x56>
 8000f36:	4f20      	ldr	r7, [pc, #128]	; (8000fb8 <_malloc_r+0xb0>)
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	b923      	cbnz	r3, 8000f46 <_malloc_r+0x3e>
 8000f3c:	4621      	mov	r1, r4
 8000f3e:	4630      	mov	r0, r6
 8000f40:	f000 fb28 	bl	8001594 <_sbrk_r>
 8000f44:	6038      	str	r0, [r7, #0]
 8000f46:	4629      	mov	r1, r5
 8000f48:	4630      	mov	r0, r6
 8000f4a:	f000 fb23 	bl	8001594 <_sbrk_r>
 8000f4e:	1c43      	adds	r3, r0, #1
 8000f50:	d123      	bne.n	8000f9a <_malloc_r+0x92>
 8000f52:	230c      	movs	r3, #12
 8000f54:	6033      	str	r3, [r6, #0]
 8000f56:	4630      	mov	r0, r6
 8000f58:	f000 fbcc 	bl	80016f4 <__malloc_unlock>
 8000f5c:	e7e3      	b.n	8000f26 <_malloc_r+0x1e>
 8000f5e:	6823      	ldr	r3, [r4, #0]
 8000f60:	1b5b      	subs	r3, r3, r5
 8000f62:	d417      	bmi.n	8000f94 <_malloc_r+0x8c>
 8000f64:	2b0b      	cmp	r3, #11
 8000f66:	d903      	bls.n	8000f70 <_malloc_r+0x68>
 8000f68:	6023      	str	r3, [r4, #0]
 8000f6a:	441c      	add	r4, r3
 8000f6c:	6025      	str	r5, [r4, #0]
 8000f6e:	e004      	b.n	8000f7a <_malloc_r+0x72>
 8000f70:	6863      	ldr	r3, [r4, #4]
 8000f72:	42a2      	cmp	r2, r4
 8000f74:	bf0c      	ite	eq
 8000f76:	600b      	streq	r3, [r1, #0]
 8000f78:	6053      	strne	r3, [r2, #4]
 8000f7a:	4630      	mov	r0, r6
 8000f7c:	f000 fbba 	bl	80016f4 <__malloc_unlock>
 8000f80:	f104 000b 	add.w	r0, r4, #11
 8000f84:	1d23      	adds	r3, r4, #4
 8000f86:	f020 0007 	bic.w	r0, r0, #7
 8000f8a:	1ac2      	subs	r2, r0, r3
 8000f8c:	d0cc      	beq.n	8000f28 <_malloc_r+0x20>
 8000f8e:	1a1b      	subs	r3, r3, r0
 8000f90:	50a3      	str	r3, [r4, r2]
 8000f92:	e7c9      	b.n	8000f28 <_malloc_r+0x20>
 8000f94:	4622      	mov	r2, r4
 8000f96:	6864      	ldr	r4, [r4, #4]
 8000f98:	e7cc      	b.n	8000f34 <_malloc_r+0x2c>
 8000f9a:	1cc4      	adds	r4, r0, #3
 8000f9c:	f024 0403 	bic.w	r4, r4, #3
 8000fa0:	42a0      	cmp	r0, r4
 8000fa2:	d0e3      	beq.n	8000f6c <_malloc_r+0x64>
 8000fa4:	1a21      	subs	r1, r4, r0
 8000fa6:	4630      	mov	r0, r6
 8000fa8:	f000 faf4 	bl	8001594 <_sbrk_r>
 8000fac:	3001      	adds	r0, #1
 8000fae:	d1dd      	bne.n	8000f6c <_malloc_r+0x64>
 8000fb0:	e7cf      	b.n	8000f52 <_malloc_r+0x4a>
 8000fb2:	bf00      	nop
 8000fb4:	20000098 	.word	0x20000098
 8000fb8:	2000009c 	.word	0x2000009c

08000fbc <__sfputc_r>:
 8000fbc:	6893      	ldr	r3, [r2, #8]
 8000fbe:	3b01      	subs	r3, #1
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	b410      	push	{r4}
 8000fc4:	6093      	str	r3, [r2, #8]
 8000fc6:	da07      	bge.n	8000fd8 <__sfputc_r+0x1c>
 8000fc8:	6994      	ldr	r4, [r2, #24]
 8000fca:	42a3      	cmp	r3, r4
 8000fcc:	db01      	blt.n	8000fd2 <__sfputc_r+0x16>
 8000fce:	290a      	cmp	r1, #10
 8000fd0:	d102      	bne.n	8000fd8 <__sfputc_r+0x1c>
 8000fd2:	bc10      	pop	{r4}
 8000fd4:	f7ff bc6c 	b.w	80008b0 <__swbuf_r>
 8000fd8:	6813      	ldr	r3, [r2, #0]
 8000fda:	1c58      	adds	r0, r3, #1
 8000fdc:	6010      	str	r0, [r2, #0]
 8000fde:	7019      	strb	r1, [r3, #0]
 8000fe0:	4608      	mov	r0, r1
 8000fe2:	bc10      	pop	{r4}
 8000fe4:	4770      	bx	lr

08000fe6 <__sfputs_r>:
 8000fe6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000fe8:	4606      	mov	r6, r0
 8000fea:	460f      	mov	r7, r1
 8000fec:	4614      	mov	r4, r2
 8000fee:	18d5      	adds	r5, r2, r3
 8000ff0:	42ac      	cmp	r4, r5
 8000ff2:	d101      	bne.n	8000ff8 <__sfputs_r+0x12>
 8000ff4:	2000      	movs	r0, #0
 8000ff6:	e007      	b.n	8001008 <__sfputs_r+0x22>
 8000ff8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000ffc:	463a      	mov	r2, r7
 8000ffe:	4630      	mov	r0, r6
 8001000:	f7ff ffdc 	bl	8000fbc <__sfputc_r>
 8001004:	1c43      	adds	r3, r0, #1
 8001006:	d1f3      	bne.n	8000ff0 <__sfputs_r+0xa>
 8001008:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800100c <_vfiprintf_r>:
 800100c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001010:	460d      	mov	r5, r1
 8001012:	b09d      	sub	sp, #116	; 0x74
 8001014:	4614      	mov	r4, r2
 8001016:	4698      	mov	r8, r3
 8001018:	4606      	mov	r6, r0
 800101a:	b118      	cbz	r0, 8001024 <_vfiprintf_r+0x18>
 800101c:	6983      	ldr	r3, [r0, #24]
 800101e:	b90b      	cbnz	r3, 8001024 <_vfiprintf_r+0x18>
 8001020:	f7ff fe20 	bl	8000c64 <__sinit>
 8001024:	4b89      	ldr	r3, [pc, #548]	; (800124c <_vfiprintf_r+0x240>)
 8001026:	429d      	cmp	r5, r3
 8001028:	d11b      	bne.n	8001062 <_vfiprintf_r+0x56>
 800102a:	6875      	ldr	r5, [r6, #4]
 800102c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800102e:	07d9      	lsls	r1, r3, #31
 8001030:	d405      	bmi.n	800103e <_vfiprintf_r+0x32>
 8001032:	89ab      	ldrh	r3, [r5, #12]
 8001034:	059a      	lsls	r2, r3, #22
 8001036:	d402      	bmi.n	800103e <_vfiprintf_r+0x32>
 8001038:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800103a:	f7ff feb1 	bl	8000da0 <__retarget_lock_acquire_recursive>
 800103e:	89ab      	ldrh	r3, [r5, #12]
 8001040:	071b      	lsls	r3, r3, #28
 8001042:	d501      	bpl.n	8001048 <_vfiprintf_r+0x3c>
 8001044:	692b      	ldr	r3, [r5, #16]
 8001046:	b9eb      	cbnz	r3, 8001084 <_vfiprintf_r+0x78>
 8001048:	4629      	mov	r1, r5
 800104a:	4630      	mov	r0, r6
 800104c:	f7ff fc82 	bl	8000954 <__swsetup_r>
 8001050:	b1c0      	cbz	r0, 8001084 <_vfiprintf_r+0x78>
 8001052:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001054:	07dc      	lsls	r4, r3, #31
 8001056:	d50e      	bpl.n	8001076 <_vfiprintf_r+0x6a>
 8001058:	f04f 30ff 	mov.w	r0, #4294967295
 800105c:	b01d      	add	sp, #116	; 0x74
 800105e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001062:	4b7b      	ldr	r3, [pc, #492]	; (8001250 <_vfiprintf_r+0x244>)
 8001064:	429d      	cmp	r5, r3
 8001066:	d101      	bne.n	800106c <_vfiprintf_r+0x60>
 8001068:	68b5      	ldr	r5, [r6, #8]
 800106a:	e7df      	b.n	800102c <_vfiprintf_r+0x20>
 800106c:	4b79      	ldr	r3, [pc, #484]	; (8001254 <_vfiprintf_r+0x248>)
 800106e:	429d      	cmp	r5, r3
 8001070:	bf08      	it	eq
 8001072:	68f5      	ldreq	r5, [r6, #12]
 8001074:	e7da      	b.n	800102c <_vfiprintf_r+0x20>
 8001076:	89ab      	ldrh	r3, [r5, #12]
 8001078:	0598      	lsls	r0, r3, #22
 800107a:	d4ed      	bmi.n	8001058 <_vfiprintf_r+0x4c>
 800107c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800107e:	f7ff fe90 	bl	8000da2 <__retarget_lock_release_recursive>
 8001082:	e7e9      	b.n	8001058 <_vfiprintf_r+0x4c>
 8001084:	2300      	movs	r3, #0
 8001086:	9309      	str	r3, [sp, #36]	; 0x24
 8001088:	2320      	movs	r3, #32
 800108a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800108e:	f8cd 800c 	str.w	r8, [sp, #12]
 8001092:	2330      	movs	r3, #48	; 0x30
 8001094:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8001258 <_vfiprintf_r+0x24c>
 8001098:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800109c:	f04f 0901 	mov.w	r9, #1
 80010a0:	4623      	mov	r3, r4
 80010a2:	469a      	mov	sl, r3
 80010a4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80010a8:	b10a      	cbz	r2, 80010ae <_vfiprintf_r+0xa2>
 80010aa:	2a25      	cmp	r2, #37	; 0x25
 80010ac:	d1f9      	bne.n	80010a2 <_vfiprintf_r+0x96>
 80010ae:	ebba 0b04 	subs.w	fp, sl, r4
 80010b2:	d00b      	beq.n	80010cc <_vfiprintf_r+0xc0>
 80010b4:	465b      	mov	r3, fp
 80010b6:	4622      	mov	r2, r4
 80010b8:	4629      	mov	r1, r5
 80010ba:	4630      	mov	r0, r6
 80010bc:	f7ff ff93 	bl	8000fe6 <__sfputs_r>
 80010c0:	3001      	adds	r0, #1
 80010c2:	f000 80aa 	beq.w	800121a <_vfiprintf_r+0x20e>
 80010c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80010c8:	445a      	add	r2, fp
 80010ca:	9209      	str	r2, [sp, #36]	; 0x24
 80010cc:	f89a 3000 	ldrb.w	r3, [sl]
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	f000 80a2 	beq.w	800121a <_vfiprintf_r+0x20e>
 80010d6:	2300      	movs	r3, #0
 80010d8:	f04f 32ff 	mov.w	r2, #4294967295
 80010dc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80010e0:	f10a 0a01 	add.w	sl, sl, #1
 80010e4:	9304      	str	r3, [sp, #16]
 80010e6:	9307      	str	r3, [sp, #28]
 80010e8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80010ec:	931a      	str	r3, [sp, #104]	; 0x68
 80010ee:	4654      	mov	r4, sl
 80010f0:	2205      	movs	r2, #5
 80010f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80010f6:	4858      	ldr	r0, [pc, #352]	; (8001258 <_vfiprintf_r+0x24c>)
 80010f8:	f7ff f87a 	bl	80001f0 <memchr>
 80010fc:	9a04      	ldr	r2, [sp, #16]
 80010fe:	b9d8      	cbnz	r0, 8001138 <_vfiprintf_r+0x12c>
 8001100:	06d1      	lsls	r1, r2, #27
 8001102:	bf44      	itt	mi
 8001104:	2320      	movmi	r3, #32
 8001106:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800110a:	0713      	lsls	r3, r2, #28
 800110c:	bf44      	itt	mi
 800110e:	232b      	movmi	r3, #43	; 0x2b
 8001110:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001114:	f89a 3000 	ldrb.w	r3, [sl]
 8001118:	2b2a      	cmp	r3, #42	; 0x2a
 800111a:	d015      	beq.n	8001148 <_vfiprintf_r+0x13c>
 800111c:	9a07      	ldr	r2, [sp, #28]
 800111e:	4654      	mov	r4, sl
 8001120:	2000      	movs	r0, #0
 8001122:	f04f 0c0a 	mov.w	ip, #10
 8001126:	4621      	mov	r1, r4
 8001128:	f811 3b01 	ldrb.w	r3, [r1], #1
 800112c:	3b30      	subs	r3, #48	; 0x30
 800112e:	2b09      	cmp	r3, #9
 8001130:	d94e      	bls.n	80011d0 <_vfiprintf_r+0x1c4>
 8001132:	b1b0      	cbz	r0, 8001162 <_vfiprintf_r+0x156>
 8001134:	9207      	str	r2, [sp, #28]
 8001136:	e014      	b.n	8001162 <_vfiprintf_r+0x156>
 8001138:	eba0 0308 	sub.w	r3, r0, r8
 800113c:	fa09 f303 	lsl.w	r3, r9, r3
 8001140:	4313      	orrs	r3, r2
 8001142:	9304      	str	r3, [sp, #16]
 8001144:	46a2      	mov	sl, r4
 8001146:	e7d2      	b.n	80010ee <_vfiprintf_r+0xe2>
 8001148:	9b03      	ldr	r3, [sp, #12]
 800114a:	1d19      	adds	r1, r3, #4
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	9103      	str	r1, [sp, #12]
 8001150:	2b00      	cmp	r3, #0
 8001152:	bfbb      	ittet	lt
 8001154:	425b      	neglt	r3, r3
 8001156:	f042 0202 	orrlt.w	r2, r2, #2
 800115a:	9307      	strge	r3, [sp, #28]
 800115c:	9307      	strlt	r3, [sp, #28]
 800115e:	bfb8      	it	lt
 8001160:	9204      	strlt	r2, [sp, #16]
 8001162:	7823      	ldrb	r3, [r4, #0]
 8001164:	2b2e      	cmp	r3, #46	; 0x2e
 8001166:	d10c      	bne.n	8001182 <_vfiprintf_r+0x176>
 8001168:	7863      	ldrb	r3, [r4, #1]
 800116a:	2b2a      	cmp	r3, #42	; 0x2a
 800116c:	d135      	bne.n	80011da <_vfiprintf_r+0x1ce>
 800116e:	9b03      	ldr	r3, [sp, #12]
 8001170:	1d1a      	adds	r2, r3, #4
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	9203      	str	r2, [sp, #12]
 8001176:	2b00      	cmp	r3, #0
 8001178:	bfb8      	it	lt
 800117a:	f04f 33ff 	movlt.w	r3, #4294967295
 800117e:	3402      	adds	r4, #2
 8001180:	9305      	str	r3, [sp, #20]
 8001182:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8001268 <_vfiprintf_r+0x25c>
 8001186:	7821      	ldrb	r1, [r4, #0]
 8001188:	2203      	movs	r2, #3
 800118a:	4650      	mov	r0, sl
 800118c:	f7ff f830 	bl	80001f0 <memchr>
 8001190:	b140      	cbz	r0, 80011a4 <_vfiprintf_r+0x198>
 8001192:	2340      	movs	r3, #64	; 0x40
 8001194:	eba0 000a 	sub.w	r0, r0, sl
 8001198:	fa03 f000 	lsl.w	r0, r3, r0
 800119c:	9b04      	ldr	r3, [sp, #16]
 800119e:	4303      	orrs	r3, r0
 80011a0:	3401      	adds	r4, #1
 80011a2:	9304      	str	r3, [sp, #16]
 80011a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80011a8:	482c      	ldr	r0, [pc, #176]	; (800125c <_vfiprintf_r+0x250>)
 80011aa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80011ae:	2206      	movs	r2, #6
 80011b0:	f7ff f81e 	bl	80001f0 <memchr>
 80011b4:	2800      	cmp	r0, #0
 80011b6:	d03f      	beq.n	8001238 <_vfiprintf_r+0x22c>
 80011b8:	4b29      	ldr	r3, [pc, #164]	; (8001260 <_vfiprintf_r+0x254>)
 80011ba:	bb1b      	cbnz	r3, 8001204 <_vfiprintf_r+0x1f8>
 80011bc:	9b03      	ldr	r3, [sp, #12]
 80011be:	3307      	adds	r3, #7
 80011c0:	f023 0307 	bic.w	r3, r3, #7
 80011c4:	3308      	adds	r3, #8
 80011c6:	9303      	str	r3, [sp, #12]
 80011c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80011ca:	443b      	add	r3, r7
 80011cc:	9309      	str	r3, [sp, #36]	; 0x24
 80011ce:	e767      	b.n	80010a0 <_vfiprintf_r+0x94>
 80011d0:	fb0c 3202 	mla	r2, ip, r2, r3
 80011d4:	460c      	mov	r4, r1
 80011d6:	2001      	movs	r0, #1
 80011d8:	e7a5      	b.n	8001126 <_vfiprintf_r+0x11a>
 80011da:	2300      	movs	r3, #0
 80011dc:	3401      	adds	r4, #1
 80011de:	9305      	str	r3, [sp, #20]
 80011e0:	4619      	mov	r1, r3
 80011e2:	f04f 0c0a 	mov.w	ip, #10
 80011e6:	4620      	mov	r0, r4
 80011e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80011ec:	3a30      	subs	r2, #48	; 0x30
 80011ee:	2a09      	cmp	r2, #9
 80011f0:	d903      	bls.n	80011fa <_vfiprintf_r+0x1ee>
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d0c5      	beq.n	8001182 <_vfiprintf_r+0x176>
 80011f6:	9105      	str	r1, [sp, #20]
 80011f8:	e7c3      	b.n	8001182 <_vfiprintf_r+0x176>
 80011fa:	fb0c 2101 	mla	r1, ip, r1, r2
 80011fe:	4604      	mov	r4, r0
 8001200:	2301      	movs	r3, #1
 8001202:	e7f0      	b.n	80011e6 <_vfiprintf_r+0x1da>
 8001204:	ab03      	add	r3, sp, #12
 8001206:	9300      	str	r3, [sp, #0]
 8001208:	462a      	mov	r2, r5
 800120a:	4b16      	ldr	r3, [pc, #88]	; (8001264 <_vfiprintf_r+0x258>)
 800120c:	a904      	add	r1, sp, #16
 800120e:	4630      	mov	r0, r6
 8001210:	f3af 8000 	nop.w
 8001214:	4607      	mov	r7, r0
 8001216:	1c78      	adds	r0, r7, #1
 8001218:	d1d6      	bne.n	80011c8 <_vfiprintf_r+0x1bc>
 800121a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800121c:	07d9      	lsls	r1, r3, #31
 800121e:	d405      	bmi.n	800122c <_vfiprintf_r+0x220>
 8001220:	89ab      	ldrh	r3, [r5, #12]
 8001222:	059a      	lsls	r2, r3, #22
 8001224:	d402      	bmi.n	800122c <_vfiprintf_r+0x220>
 8001226:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001228:	f7ff fdbb 	bl	8000da2 <__retarget_lock_release_recursive>
 800122c:	89ab      	ldrh	r3, [r5, #12]
 800122e:	065b      	lsls	r3, r3, #25
 8001230:	f53f af12 	bmi.w	8001058 <_vfiprintf_r+0x4c>
 8001234:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001236:	e711      	b.n	800105c <_vfiprintf_r+0x50>
 8001238:	ab03      	add	r3, sp, #12
 800123a:	9300      	str	r3, [sp, #0]
 800123c:	462a      	mov	r2, r5
 800123e:	4b09      	ldr	r3, [pc, #36]	; (8001264 <_vfiprintf_r+0x258>)
 8001240:	a904      	add	r1, sp, #16
 8001242:	4630      	mov	r0, r6
 8001244:	f000 f880 	bl	8001348 <_printf_i>
 8001248:	e7e4      	b.n	8001214 <_vfiprintf_r+0x208>
 800124a:	bf00      	nop
 800124c:	080017f4 	.word	0x080017f4
 8001250:	08001814 	.word	0x08001814
 8001254:	080017d4 	.word	0x080017d4
 8001258:	08001834 	.word	0x08001834
 800125c:	0800183e 	.word	0x0800183e
 8001260:	00000000 	.word	0x00000000
 8001264:	08000fe7 	.word	0x08000fe7
 8001268:	0800183a 	.word	0x0800183a

0800126c <_printf_common>:
 800126c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001270:	4616      	mov	r6, r2
 8001272:	4699      	mov	r9, r3
 8001274:	688a      	ldr	r2, [r1, #8]
 8001276:	690b      	ldr	r3, [r1, #16]
 8001278:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800127c:	4293      	cmp	r3, r2
 800127e:	bfb8      	it	lt
 8001280:	4613      	movlt	r3, r2
 8001282:	6033      	str	r3, [r6, #0]
 8001284:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001288:	4607      	mov	r7, r0
 800128a:	460c      	mov	r4, r1
 800128c:	b10a      	cbz	r2, 8001292 <_printf_common+0x26>
 800128e:	3301      	adds	r3, #1
 8001290:	6033      	str	r3, [r6, #0]
 8001292:	6823      	ldr	r3, [r4, #0]
 8001294:	0699      	lsls	r1, r3, #26
 8001296:	bf42      	ittt	mi
 8001298:	6833      	ldrmi	r3, [r6, #0]
 800129a:	3302      	addmi	r3, #2
 800129c:	6033      	strmi	r3, [r6, #0]
 800129e:	6825      	ldr	r5, [r4, #0]
 80012a0:	f015 0506 	ands.w	r5, r5, #6
 80012a4:	d106      	bne.n	80012b4 <_printf_common+0x48>
 80012a6:	f104 0a19 	add.w	sl, r4, #25
 80012aa:	68e3      	ldr	r3, [r4, #12]
 80012ac:	6832      	ldr	r2, [r6, #0]
 80012ae:	1a9b      	subs	r3, r3, r2
 80012b0:	42ab      	cmp	r3, r5
 80012b2:	dc26      	bgt.n	8001302 <_printf_common+0x96>
 80012b4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80012b8:	1e13      	subs	r3, r2, #0
 80012ba:	6822      	ldr	r2, [r4, #0]
 80012bc:	bf18      	it	ne
 80012be:	2301      	movne	r3, #1
 80012c0:	0692      	lsls	r2, r2, #26
 80012c2:	d42b      	bmi.n	800131c <_printf_common+0xb0>
 80012c4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80012c8:	4649      	mov	r1, r9
 80012ca:	4638      	mov	r0, r7
 80012cc:	47c0      	blx	r8
 80012ce:	3001      	adds	r0, #1
 80012d0:	d01e      	beq.n	8001310 <_printf_common+0xa4>
 80012d2:	6823      	ldr	r3, [r4, #0]
 80012d4:	68e5      	ldr	r5, [r4, #12]
 80012d6:	6832      	ldr	r2, [r6, #0]
 80012d8:	f003 0306 	and.w	r3, r3, #6
 80012dc:	2b04      	cmp	r3, #4
 80012de:	bf08      	it	eq
 80012e0:	1aad      	subeq	r5, r5, r2
 80012e2:	68a3      	ldr	r3, [r4, #8]
 80012e4:	6922      	ldr	r2, [r4, #16]
 80012e6:	bf0c      	ite	eq
 80012e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80012ec:	2500      	movne	r5, #0
 80012ee:	4293      	cmp	r3, r2
 80012f0:	bfc4      	itt	gt
 80012f2:	1a9b      	subgt	r3, r3, r2
 80012f4:	18ed      	addgt	r5, r5, r3
 80012f6:	2600      	movs	r6, #0
 80012f8:	341a      	adds	r4, #26
 80012fa:	42b5      	cmp	r5, r6
 80012fc:	d11a      	bne.n	8001334 <_printf_common+0xc8>
 80012fe:	2000      	movs	r0, #0
 8001300:	e008      	b.n	8001314 <_printf_common+0xa8>
 8001302:	2301      	movs	r3, #1
 8001304:	4652      	mov	r2, sl
 8001306:	4649      	mov	r1, r9
 8001308:	4638      	mov	r0, r7
 800130a:	47c0      	blx	r8
 800130c:	3001      	adds	r0, #1
 800130e:	d103      	bne.n	8001318 <_printf_common+0xac>
 8001310:	f04f 30ff 	mov.w	r0, #4294967295
 8001314:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001318:	3501      	adds	r5, #1
 800131a:	e7c6      	b.n	80012aa <_printf_common+0x3e>
 800131c:	18e1      	adds	r1, r4, r3
 800131e:	1c5a      	adds	r2, r3, #1
 8001320:	2030      	movs	r0, #48	; 0x30
 8001322:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001326:	4422      	add	r2, r4
 8001328:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800132c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001330:	3302      	adds	r3, #2
 8001332:	e7c7      	b.n	80012c4 <_printf_common+0x58>
 8001334:	2301      	movs	r3, #1
 8001336:	4622      	mov	r2, r4
 8001338:	4649      	mov	r1, r9
 800133a:	4638      	mov	r0, r7
 800133c:	47c0      	blx	r8
 800133e:	3001      	adds	r0, #1
 8001340:	d0e6      	beq.n	8001310 <_printf_common+0xa4>
 8001342:	3601      	adds	r6, #1
 8001344:	e7d9      	b.n	80012fa <_printf_common+0x8e>
	...

08001348 <_printf_i>:
 8001348:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800134c:	460c      	mov	r4, r1
 800134e:	4691      	mov	r9, r2
 8001350:	7e27      	ldrb	r7, [r4, #24]
 8001352:	990c      	ldr	r1, [sp, #48]	; 0x30
 8001354:	2f78      	cmp	r7, #120	; 0x78
 8001356:	4680      	mov	r8, r0
 8001358:	469a      	mov	sl, r3
 800135a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800135e:	d807      	bhi.n	8001370 <_printf_i+0x28>
 8001360:	2f62      	cmp	r7, #98	; 0x62
 8001362:	d80a      	bhi.n	800137a <_printf_i+0x32>
 8001364:	2f00      	cmp	r7, #0
 8001366:	f000 80d8 	beq.w	800151a <_printf_i+0x1d2>
 800136a:	2f58      	cmp	r7, #88	; 0x58
 800136c:	f000 80a3 	beq.w	80014b6 <_printf_i+0x16e>
 8001370:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8001374:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8001378:	e03a      	b.n	80013f0 <_printf_i+0xa8>
 800137a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800137e:	2b15      	cmp	r3, #21
 8001380:	d8f6      	bhi.n	8001370 <_printf_i+0x28>
 8001382:	a001      	add	r0, pc, #4	; (adr r0, 8001388 <_printf_i+0x40>)
 8001384:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8001388:	080013e1 	.word	0x080013e1
 800138c:	080013f5 	.word	0x080013f5
 8001390:	08001371 	.word	0x08001371
 8001394:	08001371 	.word	0x08001371
 8001398:	08001371 	.word	0x08001371
 800139c:	08001371 	.word	0x08001371
 80013a0:	080013f5 	.word	0x080013f5
 80013a4:	08001371 	.word	0x08001371
 80013a8:	08001371 	.word	0x08001371
 80013ac:	08001371 	.word	0x08001371
 80013b0:	08001371 	.word	0x08001371
 80013b4:	08001501 	.word	0x08001501
 80013b8:	08001425 	.word	0x08001425
 80013bc:	080014e3 	.word	0x080014e3
 80013c0:	08001371 	.word	0x08001371
 80013c4:	08001371 	.word	0x08001371
 80013c8:	08001523 	.word	0x08001523
 80013cc:	08001371 	.word	0x08001371
 80013d0:	08001425 	.word	0x08001425
 80013d4:	08001371 	.word	0x08001371
 80013d8:	08001371 	.word	0x08001371
 80013dc:	080014eb 	.word	0x080014eb
 80013e0:	680b      	ldr	r3, [r1, #0]
 80013e2:	1d1a      	adds	r2, r3, #4
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	600a      	str	r2, [r1, #0]
 80013e8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80013ec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80013f0:	2301      	movs	r3, #1
 80013f2:	e0a3      	b.n	800153c <_printf_i+0x1f4>
 80013f4:	6825      	ldr	r5, [r4, #0]
 80013f6:	6808      	ldr	r0, [r1, #0]
 80013f8:	062e      	lsls	r6, r5, #24
 80013fa:	f100 0304 	add.w	r3, r0, #4
 80013fe:	d50a      	bpl.n	8001416 <_printf_i+0xce>
 8001400:	6805      	ldr	r5, [r0, #0]
 8001402:	600b      	str	r3, [r1, #0]
 8001404:	2d00      	cmp	r5, #0
 8001406:	da03      	bge.n	8001410 <_printf_i+0xc8>
 8001408:	232d      	movs	r3, #45	; 0x2d
 800140a:	426d      	negs	r5, r5
 800140c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001410:	485e      	ldr	r0, [pc, #376]	; (800158c <_printf_i+0x244>)
 8001412:	230a      	movs	r3, #10
 8001414:	e019      	b.n	800144a <_printf_i+0x102>
 8001416:	f015 0f40 	tst.w	r5, #64	; 0x40
 800141a:	6805      	ldr	r5, [r0, #0]
 800141c:	600b      	str	r3, [r1, #0]
 800141e:	bf18      	it	ne
 8001420:	b22d      	sxthne	r5, r5
 8001422:	e7ef      	b.n	8001404 <_printf_i+0xbc>
 8001424:	680b      	ldr	r3, [r1, #0]
 8001426:	6825      	ldr	r5, [r4, #0]
 8001428:	1d18      	adds	r0, r3, #4
 800142a:	6008      	str	r0, [r1, #0]
 800142c:	0628      	lsls	r0, r5, #24
 800142e:	d501      	bpl.n	8001434 <_printf_i+0xec>
 8001430:	681d      	ldr	r5, [r3, #0]
 8001432:	e002      	b.n	800143a <_printf_i+0xf2>
 8001434:	0669      	lsls	r1, r5, #25
 8001436:	d5fb      	bpl.n	8001430 <_printf_i+0xe8>
 8001438:	881d      	ldrh	r5, [r3, #0]
 800143a:	4854      	ldr	r0, [pc, #336]	; (800158c <_printf_i+0x244>)
 800143c:	2f6f      	cmp	r7, #111	; 0x6f
 800143e:	bf0c      	ite	eq
 8001440:	2308      	moveq	r3, #8
 8001442:	230a      	movne	r3, #10
 8001444:	2100      	movs	r1, #0
 8001446:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800144a:	6866      	ldr	r6, [r4, #4]
 800144c:	60a6      	str	r6, [r4, #8]
 800144e:	2e00      	cmp	r6, #0
 8001450:	bfa2      	ittt	ge
 8001452:	6821      	ldrge	r1, [r4, #0]
 8001454:	f021 0104 	bicge.w	r1, r1, #4
 8001458:	6021      	strge	r1, [r4, #0]
 800145a:	b90d      	cbnz	r5, 8001460 <_printf_i+0x118>
 800145c:	2e00      	cmp	r6, #0
 800145e:	d04d      	beq.n	80014fc <_printf_i+0x1b4>
 8001460:	4616      	mov	r6, r2
 8001462:	fbb5 f1f3 	udiv	r1, r5, r3
 8001466:	fb03 5711 	mls	r7, r3, r1, r5
 800146a:	5dc7      	ldrb	r7, [r0, r7]
 800146c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8001470:	462f      	mov	r7, r5
 8001472:	42bb      	cmp	r3, r7
 8001474:	460d      	mov	r5, r1
 8001476:	d9f4      	bls.n	8001462 <_printf_i+0x11a>
 8001478:	2b08      	cmp	r3, #8
 800147a:	d10b      	bne.n	8001494 <_printf_i+0x14c>
 800147c:	6823      	ldr	r3, [r4, #0]
 800147e:	07df      	lsls	r7, r3, #31
 8001480:	d508      	bpl.n	8001494 <_printf_i+0x14c>
 8001482:	6923      	ldr	r3, [r4, #16]
 8001484:	6861      	ldr	r1, [r4, #4]
 8001486:	4299      	cmp	r1, r3
 8001488:	bfde      	ittt	le
 800148a:	2330      	movle	r3, #48	; 0x30
 800148c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8001490:	f106 36ff 	addle.w	r6, r6, #4294967295
 8001494:	1b92      	subs	r2, r2, r6
 8001496:	6122      	str	r2, [r4, #16]
 8001498:	f8cd a000 	str.w	sl, [sp]
 800149c:	464b      	mov	r3, r9
 800149e:	aa03      	add	r2, sp, #12
 80014a0:	4621      	mov	r1, r4
 80014a2:	4640      	mov	r0, r8
 80014a4:	f7ff fee2 	bl	800126c <_printf_common>
 80014a8:	3001      	adds	r0, #1
 80014aa:	d14c      	bne.n	8001546 <_printf_i+0x1fe>
 80014ac:	f04f 30ff 	mov.w	r0, #4294967295
 80014b0:	b004      	add	sp, #16
 80014b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80014b6:	4835      	ldr	r0, [pc, #212]	; (800158c <_printf_i+0x244>)
 80014b8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80014bc:	6823      	ldr	r3, [r4, #0]
 80014be:	680e      	ldr	r6, [r1, #0]
 80014c0:	061f      	lsls	r7, r3, #24
 80014c2:	f856 5b04 	ldr.w	r5, [r6], #4
 80014c6:	600e      	str	r6, [r1, #0]
 80014c8:	d514      	bpl.n	80014f4 <_printf_i+0x1ac>
 80014ca:	07d9      	lsls	r1, r3, #31
 80014cc:	bf44      	itt	mi
 80014ce:	f043 0320 	orrmi.w	r3, r3, #32
 80014d2:	6023      	strmi	r3, [r4, #0]
 80014d4:	b91d      	cbnz	r5, 80014de <_printf_i+0x196>
 80014d6:	6823      	ldr	r3, [r4, #0]
 80014d8:	f023 0320 	bic.w	r3, r3, #32
 80014dc:	6023      	str	r3, [r4, #0]
 80014de:	2310      	movs	r3, #16
 80014e0:	e7b0      	b.n	8001444 <_printf_i+0xfc>
 80014e2:	6823      	ldr	r3, [r4, #0]
 80014e4:	f043 0320 	orr.w	r3, r3, #32
 80014e8:	6023      	str	r3, [r4, #0]
 80014ea:	2378      	movs	r3, #120	; 0x78
 80014ec:	4828      	ldr	r0, [pc, #160]	; (8001590 <_printf_i+0x248>)
 80014ee:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80014f2:	e7e3      	b.n	80014bc <_printf_i+0x174>
 80014f4:	065e      	lsls	r6, r3, #25
 80014f6:	bf48      	it	mi
 80014f8:	b2ad      	uxthmi	r5, r5
 80014fa:	e7e6      	b.n	80014ca <_printf_i+0x182>
 80014fc:	4616      	mov	r6, r2
 80014fe:	e7bb      	b.n	8001478 <_printf_i+0x130>
 8001500:	680b      	ldr	r3, [r1, #0]
 8001502:	6826      	ldr	r6, [r4, #0]
 8001504:	6960      	ldr	r0, [r4, #20]
 8001506:	1d1d      	adds	r5, r3, #4
 8001508:	600d      	str	r5, [r1, #0]
 800150a:	0635      	lsls	r5, r6, #24
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	d501      	bpl.n	8001514 <_printf_i+0x1cc>
 8001510:	6018      	str	r0, [r3, #0]
 8001512:	e002      	b.n	800151a <_printf_i+0x1d2>
 8001514:	0671      	lsls	r1, r6, #25
 8001516:	d5fb      	bpl.n	8001510 <_printf_i+0x1c8>
 8001518:	8018      	strh	r0, [r3, #0]
 800151a:	2300      	movs	r3, #0
 800151c:	6123      	str	r3, [r4, #16]
 800151e:	4616      	mov	r6, r2
 8001520:	e7ba      	b.n	8001498 <_printf_i+0x150>
 8001522:	680b      	ldr	r3, [r1, #0]
 8001524:	1d1a      	adds	r2, r3, #4
 8001526:	600a      	str	r2, [r1, #0]
 8001528:	681e      	ldr	r6, [r3, #0]
 800152a:	6862      	ldr	r2, [r4, #4]
 800152c:	2100      	movs	r1, #0
 800152e:	4630      	mov	r0, r6
 8001530:	f7fe fe5e 	bl	80001f0 <memchr>
 8001534:	b108      	cbz	r0, 800153a <_printf_i+0x1f2>
 8001536:	1b80      	subs	r0, r0, r6
 8001538:	6060      	str	r0, [r4, #4]
 800153a:	6863      	ldr	r3, [r4, #4]
 800153c:	6123      	str	r3, [r4, #16]
 800153e:	2300      	movs	r3, #0
 8001540:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001544:	e7a8      	b.n	8001498 <_printf_i+0x150>
 8001546:	6923      	ldr	r3, [r4, #16]
 8001548:	4632      	mov	r2, r6
 800154a:	4649      	mov	r1, r9
 800154c:	4640      	mov	r0, r8
 800154e:	47d0      	blx	sl
 8001550:	3001      	adds	r0, #1
 8001552:	d0ab      	beq.n	80014ac <_printf_i+0x164>
 8001554:	6823      	ldr	r3, [r4, #0]
 8001556:	079b      	lsls	r3, r3, #30
 8001558:	d413      	bmi.n	8001582 <_printf_i+0x23a>
 800155a:	68e0      	ldr	r0, [r4, #12]
 800155c:	9b03      	ldr	r3, [sp, #12]
 800155e:	4298      	cmp	r0, r3
 8001560:	bfb8      	it	lt
 8001562:	4618      	movlt	r0, r3
 8001564:	e7a4      	b.n	80014b0 <_printf_i+0x168>
 8001566:	2301      	movs	r3, #1
 8001568:	4632      	mov	r2, r6
 800156a:	4649      	mov	r1, r9
 800156c:	4640      	mov	r0, r8
 800156e:	47d0      	blx	sl
 8001570:	3001      	adds	r0, #1
 8001572:	d09b      	beq.n	80014ac <_printf_i+0x164>
 8001574:	3501      	adds	r5, #1
 8001576:	68e3      	ldr	r3, [r4, #12]
 8001578:	9903      	ldr	r1, [sp, #12]
 800157a:	1a5b      	subs	r3, r3, r1
 800157c:	42ab      	cmp	r3, r5
 800157e:	dcf2      	bgt.n	8001566 <_printf_i+0x21e>
 8001580:	e7eb      	b.n	800155a <_printf_i+0x212>
 8001582:	2500      	movs	r5, #0
 8001584:	f104 0619 	add.w	r6, r4, #25
 8001588:	e7f5      	b.n	8001576 <_printf_i+0x22e>
 800158a:	bf00      	nop
 800158c:	08001845 	.word	0x08001845
 8001590:	08001856 	.word	0x08001856

08001594 <_sbrk_r>:
 8001594:	b538      	push	{r3, r4, r5, lr}
 8001596:	4d06      	ldr	r5, [pc, #24]	; (80015b0 <_sbrk_r+0x1c>)
 8001598:	2300      	movs	r3, #0
 800159a:	4604      	mov	r4, r0
 800159c:	4608      	mov	r0, r1
 800159e:	602b      	str	r3, [r5, #0]
 80015a0:	f7ff f866 	bl	8000670 <_sbrk>
 80015a4:	1c43      	adds	r3, r0, #1
 80015a6:	d102      	bne.n	80015ae <_sbrk_r+0x1a>
 80015a8:	682b      	ldr	r3, [r5, #0]
 80015aa:	b103      	cbz	r3, 80015ae <_sbrk_r+0x1a>
 80015ac:	6023      	str	r3, [r4, #0]
 80015ae:	bd38      	pop	{r3, r4, r5, pc}
 80015b0:	200000bc 	.word	0x200000bc

080015b4 <__sread>:
 80015b4:	b510      	push	{r4, lr}
 80015b6:	460c      	mov	r4, r1
 80015b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80015bc:	f000 f8a0 	bl	8001700 <_read_r>
 80015c0:	2800      	cmp	r0, #0
 80015c2:	bfab      	itete	ge
 80015c4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80015c6:	89a3      	ldrhlt	r3, [r4, #12]
 80015c8:	181b      	addge	r3, r3, r0
 80015ca:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80015ce:	bfac      	ite	ge
 80015d0:	6563      	strge	r3, [r4, #84]	; 0x54
 80015d2:	81a3      	strhlt	r3, [r4, #12]
 80015d4:	bd10      	pop	{r4, pc}

080015d6 <__swrite>:
 80015d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80015da:	461f      	mov	r7, r3
 80015dc:	898b      	ldrh	r3, [r1, #12]
 80015de:	05db      	lsls	r3, r3, #23
 80015e0:	4605      	mov	r5, r0
 80015e2:	460c      	mov	r4, r1
 80015e4:	4616      	mov	r6, r2
 80015e6:	d505      	bpl.n	80015f4 <__swrite+0x1e>
 80015e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80015ec:	2302      	movs	r3, #2
 80015ee:	2200      	movs	r2, #0
 80015f0:	f000 f868 	bl	80016c4 <_lseek_r>
 80015f4:	89a3      	ldrh	r3, [r4, #12]
 80015f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80015fa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80015fe:	81a3      	strh	r3, [r4, #12]
 8001600:	4632      	mov	r2, r6
 8001602:	463b      	mov	r3, r7
 8001604:	4628      	mov	r0, r5
 8001606:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800160a:	f000 b817 	b.w	800163c <_write_r>

0800160e <__sseek>:
 800160e:	b510      	push	{r4, lr}
 8001610:	460c      	mov	r4, r1
 8001612:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001616:	f000 f855 	bl	80016c4 <_lseek_r>
 800161a:	1c43      	adds	r3, r0, #1
 800161c:	89a3      	ldrh	r3, [r4, #12]
 800161e:	bf15      	itete	ne
 8001620:	6560      	strne	r0, [r4, #84]	; 0x54
 8001622:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8001626:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800162a:	81a3      	strheq	r3, [r4, #12]
 800162c:	bf18      	it	ne
 800162e:	81a3      	strhne	r3, [r4, #12]
 8001630:	bd10      	pop	{r4, pc}

08001632 <__sclose>:
 8001632:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001636:	f000 b813 	b.w	8001660 <_close_r>
	...

0800163c <_write_r>:
 800163c:	b538      	push	{r3, r4, r5, lr}
 800163e:	4d07      	ldr	r5, [pc, #28]	; (800165c <_write_r+0x20>)
 8001640:	4604      	mov	r4, r0
 8001642:	4608      	mov	r0, r1
 8001644:	4611      	mov	r1, r2
 8001646:	2200      	movs	r2, #0
 8001648:	602a      	str	r2, [r5, #0]
 800164a:	461a      	mov	r2, r3
 800164c:	f7fe ffc3 	bl	80005d6 <_write>
 8001650:	1c43      	adds	r3, r0, #1
 8001652:	d102      	bne.n	800165a <_write_r+0x1e>
 8001654:	682b      	ldr	r3, [r5, #0]
 8001656:	b103      	cbz	r3, 800165a <_write_r+0x1e>
 8001658:	6023      	str	r3, [r4, #0]
 800165a:	bd38      	pop	{r3, r4, r5, pc}
 800165c:	200000bc 	.word	0x200000bc

08001660 <_close_r>:
 8001660:	b538      	push	{r3, r4, r5, lr}
 8001662:	4d06      	ldr	r5, [pc, #24]	; (800167c <_close_r+0x1c>)
 8001664:	2300      	movs	r3, #0
 8001666:	4604      	mov	r4, r0
 8001668:	4608      	mov	r0, r1
 800166a:	602b      	str	r3, [r5, #0]
 800166c:	f7fe ffcf 	bl	800060e <_close>
 8001670:	1c43      	adds	r3, r0, #1
 8001672:	d102      	bne.n	800167a <_close_r+0x1a>
 8001674:	682b      	ldr	r3, [r5, #0]
 8001676:	b103      	cbz	r3, 800167a <_close_r+0x1a>
 8001678:	6023      	str	r3, [r4, #0]
 800167a:	bd38      	pop	{r3, r4, r5, pc}
 800167c:	200000bc 	.word	0x200000bc

08001680 <_fstat_r>:
 8001680:	b538      	push	{r3, r4, r5, lr}
 8001682:	4d07      	ldr	r5, [pc, #28]	; (80016a0 <_fstat_r+0x20>)
 8001684:	2300      	movs	r3, #0
 8001686:	4604      	mov	r4, r0
 8001688:	4608      	mov	r0, r1
 800168a:	4611      	mov	r1, r2
 800168c:	602b      	str	r3, [r5, #0]
 800168e:	f7fe ffc9 	bl	8000624 <_fstat>
 8001692:	1c43      	adds	r3, r0, #1
 8001694:	d102      	bne.n	800169c <_fstat_r+0x1c>
 8001696:	682b      	ldr	r3, [r5, #0]
 8001698:	b103      	cbz	r3, 800169c <_fstat_r+0x1c>
 800169a:	6023      	str	r3, [r4, #0]
 800169c:	bd38      	pop	{r3, r4, r5, pc}
 800169e:	bf00      	nop
 80016a0:	200000bc 	.word	0x200000bc

080016a4 <_isatty_r>:
 80016a4:	b538      	push	{r3, r4, r5, lr}
 80016a6:	4d06      	ldr	r5, [pc, #24]	; (80016c0 <_isatty_r+0x1c>)
 80016a8:	2300      	movs	r3, #0
 80016aa:	4604      	mov	r4, r0
 80016ac:	4608      	mov	r0, r1
 80016ae:	602b      	str	r3, [r5, #0]
 80016b0:	f7fe ffc7 	bl	8000642 <_isatty>
 80016b4:	1c43      	adds	r3, r0, #1
 80016b6:	d102      	bne.n	80016be <_isatty_r+0x1a>
 80016b8:	682b      	ldr	r3, [r5, #0]
 80016ba:	b103      	cbz	r3, 80016be <_isatty_r+0x1a>
 80016bc:	6023      	str	r3, [r4, #0]
 80016be:	bd38      	pop	{r3, r4, r5, pc}
 80016c0:	200000bc 	.word	0x200000bc

080016c4 <_lseek_r>:
 80016c4:	b538      	push	{r3, r4, r5, lr}
 80016c6:	4d07      	ldr	r5, [pc, #28]	; (80016e4 <_lseek_r+0x20>)
 80016c8:	4604      	mov	r4, r0
 80016ca:	4608      	mov	r0, r1
 80016cc:	4611      	mov	r1, r2
 80016ce:	2200      	movs	r2, #0
 80016d0:	602a      	str	r2, [r5, #0]
 80016d2:	461a      	mov	r2, r3
 80016d4:	f7fe ffbf 	bl	8000656 <_lseek>
 80016d8:	1c43      	adds	r3, r0, #1
 80016da:	d102      	bne.n	80016e2 <_lseek_r+0x1e>
 80016dc:	682b      	ldr	r3, [r5, #0]
 80016de:	b103      	cbz	r3, 80016e2 <_lseek_r+0x1e>
 80016e0:	6023      	str	r3, [r4, #0]
 80016e2:	bd38      	pop	{r3, r4, r5, pc}
 80016e4:	200000bc 	.word	0x200000bc

080016e8 <__malloc_lock>:
 80016e8:	4801      	ldr	r0, [pc, #4]	; (80016f0 <__malloc_lock+0x8>)
 80016ea:	f7ff bb59 	b.w	8000da0 <__retarget_lock_acquire_recursive>
 80016ee:	bf00      	nop
 80016f0:	200000b4 	.word	0x200000b4

080016f4 <__malloc_unlock>:
 80016f4:	4801      	ldr	r0, [pc, #4]	; (80016fc <__malloc_unlock+0x8>)
 80016f6:	f7ff bb54 	b.w	8000da2 <__retarget_lock_release_recursive>
 80016fa:	bf00      	nop
 80016fc:	200000b4 	.word	0x200000b4

08001700 <_read_r>:
 8001700:	b538      	push	{r3, r4, r5, lr}
 8001702:	4d07      	ldr	r5, [pc, #28]	; (8001720 <_read_r+0x20>)
 8001704:	4604      	mov	r4, r0
 8001706:	4608      	mov	r0, r1
 8001708:	4611      	mov	r1, r2
 800170a:	2200      	movs	r2, #0
 800170c:	602a      	str	r2, [r5, #0]
 800170e:	461a      	mov	r2, r3
 8001710:	f7fe ff44 	bl	800059c <_read>
 8001714:	1c43      	adds	r3, r0, #1
 8001716:	d102      	bne.n	800171e <_read_r+0x1e>
 8001718:	682b      	ldr	r3, [r5, #0]
 800171a:	b103      	cbz	r3, 800171e <_read_r+0x1e>
 800171c:	6023      	str	r3, [r4, #0]
 800171e:	bd38      	pop	{r3, r4, r5, pc}
 8001720:	200000bc 	.word	0x200000bc

08001724 <_init>:
 8001724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001726:	bf00      	nop
 8001728:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800172a:	bc08      	pop	{r3}
 800172c:	469e      	mov	lr, r3
 800172e:	4770      	bx	lr

08001730 <_fini>:
 8001730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001732:	bf00      	nop
 8001734:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001736:	bc08      	pop	{r3}
 8001738:	469e      	mov	lr, r3
 800173a:	4770      	bx	lr
