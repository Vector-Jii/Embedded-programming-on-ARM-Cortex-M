/**
Exercise question :-
Write a program to enable all configurable faults exception ,implement the fault exception handler and
cause the fault by following method
1. Execute an undefined instruction
2. Divide by zero
3. Try execute instruction from peripheral region
4. Execute SVC inside a SVC handler
5. Executing SVC instruction inside the interrupt handler whose priority is same as or lesser
   SVC handler

   In this program we will analyze the fault with the help of stack analysis
 */

#include <stdint.h>

#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

#include<stdio.h>
#include<stdint.h>

int main(void)
{
	//1. Enable all the configurable exception like usage,bus and mem manage fault

	uint32_t *pSHCSR = (uint32_t*)0xE000ED24;    // pointer to the SHCSR
	*pSHCSR |= (1<< 16); // mem manage
	*pSHCSR |= (1<< 17); // bus
	*pSHCSR |= (1<< 18); // usage

	//3. Force the processor to execute some undefined instruction   [Raising usage fault]

	uint32_t *pSRAM = (uint32_t*)0x20010000;
	*pSRAM = 0xFFFFFFFF;

	void (*some_address) (void);

	//some_address = (void*)pSRAM;
	some_address = (void*)0x20010001;

	some_address();

    /* Loop forever */
	for(;;);
}

//2. Implement the fault handlers

void HardFault_Handler(void)
{
	printf("Inside hard fault handler ");
	while(1);
}
void MemManage_Handler(void)
{
	printf("memory manage fault handler");
	while(1);
}
void BusFault_Handler(void)
{
	printf("Inside bus fault handler");
	while(1);
}

__attribute__((naked)) void UsageFault_Handler(void)
{
	/**
	 * here we will extract the value of MSP which happens to be base address if stack(Thread mode)
	 */
	__asm volatile("MRS r0,MSP"); // Store the address of MSP in R0 register why ? bcuz the 1st argument is stored in stored in R0
	__asm volatile("B UsageFault_Handler_c"); // Transfer the execution to UsageFault_Handler_c
}

void UsageFault_Handler_c(uint32_t *pBaseStackFrame)
{
	uint32_t *pUFSR = (uint32_t*)0xE000ED2A;
	// uint32_t * pCSFR = (uint32_t*)0xE000ED28;
	printf("Inside usage fault \n");
	printf("UFSR = %lx\n",(*pUFSR)& 0xFFFF);
	// printf("CSFR = %lx \n", (*pCSFR));

	printf("Base of the stack frame : %p \n",pBaseStackFrame);
	printf("Value of R0 = %xl \n",pBaseStackFrame[0]);
	printf("Value of R1 = %xl \n",pBaseStackFrame[1]);
	printf("Value of R2 = %xl \n",pBaseStackFrame[2]);
	printf("Value of R3 = %xl \n",pBaseStackFrame[3]);
	printf("Value of R12 = %xl \n",pBaseStackFrame[4]);
	printf("Value of LR = %xl \n",pBaseStackFrame[5]);
	printf("Value of PC = %xl \n",pBaseStackFrame[6]);
	printf("Value of xPSR = %xl \n",pBaseStackFrame[7]);

	while(1);
}


